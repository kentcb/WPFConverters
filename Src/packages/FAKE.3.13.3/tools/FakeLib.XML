<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FakeLib</name></assembly>
<members>
<member name="M:Fake.AdditionalSyntax.op_EqualsQmarkGreater(System.String,System.String,System.Boolean)">
<summary>
 Defines a conditional dependency - y is dependent on x if the condition is true
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_LessEqualsGreater(System.String,System.String)">
<summary>
 Defines that x and y are not dependent on each other but y is dependent on all dependencies of x.
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_EqualsEqualsGreater(System.String,System.String)">
<summary>
 Defines a dependency - y is dependent on x
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.addDependenciesOnSameLevel(System.String,System.String)">
<summary>
 Specifies that two targets have the same dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.targetsAreOnSameLevel(System.String,System.String)">
<summary>
 Specifies that two targets are on the same level of execution
</summary>
</member>
<member name="P:Fake.AdditionalSyntax.sameLevels">
<summary>
 Stores which targets are on the same level
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunTarget">
<summary>
 Runs the target given by the target parameter
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunTargetOrDefault(System.String)">
<summary>
 Runs the target given by the target parameter or the given default target
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunParameterTargetOrDefault(System.String,System.String)">
<summary>
 Runs the target given by the build script parameter or the given default target
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.Run(System.String)">
<summary>
 Runs a Target and its dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.And``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Appends the dependency to the list of dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.Dependency``1(``0)">
<summary>
 Converts a dependency into a list
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.For(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Allows to use For? syntax for Dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_DynamicAssignment``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
<summary>
 Allows to use Tokens instead of strings for TargetNames
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_Dynamic``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Allows to use Tokens instead of strings
</summary>
</member>
<member name="T:Fake.AdditionalSyntax">
<summary>
 Provides functions and operators to deal with FAKE targets and target dependencies.
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoScm">
<summary>
 git or mercurial
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoProvider">
<summary>
 GitHub, BitBucket or Kiln
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoName">
<summary>
 Repository name in format owner-name/repo-name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitTimestamp">
<summary>
 Commit date/time
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitMessage">
<summary>
 Commit message
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitAuthorEmail">
<summary>
 Commit author&apos;s email address
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitAuthor">
<summary>
 Commit author&apos;s name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommit">
<summary>
 Commit ID (SHA)
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoBranch">
<summary>
 Build branch
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.PullRequestTitle">
<summary>
 GitHub Pull Request title
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.PullRequestNumber">
<summary>
 GitHub Pull Request number
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectSlug">
<summary>
 Project slug (as seen in project details URL)
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectName">
<summary>
 Project name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectId">
<summary>
 AppVeyor unique project ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.Platform">
<summary>
 Platform name set on Build tab of project settings (or through platform parameter in appveyor.yml).
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.JobId">
<summary>
 AppVeyor unique job ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.Configuration">
<summary>
 Configuration name set on Build tab of project settings (or through configuration parameter in appveyor.yml).  
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildVersion">
<summary>
 Build version
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildNumber">
<summary>
 Build number
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildId">
<summary>
 AppVeyor unique build ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildFolder">
<summary>
 Path to clone directory
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ApiUrl">
<summary>
 AppVeyor Build Agent API URL
</summary>
</member>
<member name="T:Fake.AppVeyor.AppVeyorEnvironment">
<summary>
 AppVeyor environment variables as [described](http://www.appveyor.com/docs/environment-variables)
</summary>
</member>
<member name="M:Fake.AppVeyor.FinishTestCase(System.String,System.String,System.TimeSpan)">
<summary>
 Finishes the test case.
</summary>
</member>
<member name="M:Fake.AppVeyor.TestSucceeded(System.String,System.String)">
<summary>
 Reports a succeeded test.
</summary>
</member>
<member name="M:Fake.AppVeyor.IgnoreTestCase``1(System.String,System.String,``0)">
<summary>
 Ignores the test case.      
</summary>
</member>
<member name="M:Fake.AppVeyor.TestFailed(System.String,System.String,System.String,System.String)">
<summary>
 Reports a failed test.
</summary>
</member>
<member name="M:Fake.AppVeyor.StartTestCase(System.String,System.String)">
<summary>
 Starts the test case.
</summary>
</member>
<member name="M:Fake.AppVeyor.StartTestSuite``1(``0)">
<summary>
 Starts the test suite.
</summary>
</member>
<member name="M:Fake.AppVeyor.FinishTestSuite``1(``0)">
<summary>
 Finishes the test suite.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.AppVeyor">
<summary>
 Contains code to configure FAKE for AppVeyor integration
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Version(System.String)">
<summary>
 Creates an attribute which holds the assembly version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Trademark(System.String)">
<summary>
 Creates an attribute which holds the trademark
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Title(System.String)">
<summary>
 Creates an attribute which holds the product title
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.StringAttribute(System.String,System.String,System.String)">
<summary>
 Creates a simple attribute with string values. Used as base for other attributes
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Product(System.String)">
<summary>
 Creates an attribute which holds the product name
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Metadata(System.String,System.String)">
<summary>
 Create an attribute which specifies metadata about the assembly
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.KeyName(System.String)">
<summary>
 Creates an attribute which holds the assembly key name
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.KeyFile(System.String)">
<summary>
 Creates an attribute which holds the assembly key file
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.InternalsVisibleTo(System.String)">
<summary>
 Creates an attribute which holds the &quot;InternalVisibleTo&quot; data
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.InformationalVersion(System.String)">
<summary>
 Creates an attribute which holds an assembly information version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Guid(System.String)">
<summary>
 Creates an attribute which holds the Guid
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.FileVersion(System.String)">
<summary>
 Creates an attribute which holds the assembly file version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Description(System.String)">
<summary>
 Creates an attribute which holds the product description
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.DelaySign(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly uses delayed signing
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Culture(System.String)">
<summary>
 Creates an attribute which holds the assembly culture information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Copyright(System.String)">
<summary>
 Creates an attribute which holds the copyright information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Configuration(System.String)">
<summary>
 Creates an attribute which holds the assembly configuration
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Company(System.String)">
<summary>
 Creates an attribute which holds the company information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.ComVisible(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly is visible via COM
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.CLSCompliant(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly is CLS compliant
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.BoolAttribute(System.String,System.Boolean,System.String)">
<summary>
 Creates a simple attribute with boolean values. Used as base for other attributes
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.AssemblyInfoFile.Attribute">
<summary>
 Represents AssemblyInfo attributes
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.AssemblyInfoFile.AssemblyInfoFileConfig">
<summary>
 Represents options for configuring the emission of AssemblyInfo
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateVisualBasicAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a VB AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateFSharpAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a F# AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCSharpAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a C# AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateVisualBasicAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a VB AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateFSharpAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a F# AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCSharpAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a C# AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.AssemblyInfoFile">
<summary>
 Contains tasks to generate AssemblyInfo files for C# and F#.
 There is also a tutorial about the [AssemblyInfo tasks](../assemblyinfo.html) available.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.AssemblyInfoHelper.BulkReplaceAssemblyInfoVersions(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams,Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams})">
<summary>
 Update all AssemblyInfo.[fs|cs|vb] files in the specified directory and its subdirectories
 ## Parameters

 - &apos;dir&apos; - The directory (subdirectories will be included), which inhabits the AssemblyInfo files.
 - &apos;replacementParameters&apos; - The replacement parameters for the AssemblyInfo files.

 ## Sample

        BulkReplaceAssemblyInfoVersions &quot;test/&quot; (fun f -&gt; 
                                                   {f with
                                                       AssemblyVersion = &quot;1.1.1.1&quot;
                                                       AssemblyInformationalVersion = &quot;1.1.1.1&quot;})
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.AssemblyInfoHelper.AssemblyInfoReplacementDefaults">
<summary>
 AssemblyInfoReplacement default params
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.AssemblyInfo(Microsoft.FSharp.Core.FSharpFunc{Fake.AssemblyInfoHelper.AssemblyInfoParams,Fake.AssemblyInfoHelper.AssemblyInfoParams})">
<summary>
 Generates an AssemblyInfo file for projects
 **Obsolete - Please use the new AssemblyInfoFile tasks**
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.generateFile(Fake.AssemblyInfoHelper.AssemblyInfoParams,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.IO.TextWriter)">
<summary>
 generates the assembly info file
</summary>
</member>
<member name="P:Fake.AssemblyInfoHelper.AssemblyInfoDefaults">
<summary>
 AssemblyInfo default params
</summary>
</member>
<member name="T:Fake.AssemblyInfoHelper">
<summary>
 Generates an AssemblyInfo file
 **Obsolete - Please use the new AssemblyInfoFile tasks**
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.WebJobs">
<summary>
 The webjobs to deploy to this web site
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.Password">
<summary>
 The FTP Password
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.UserName">
<summary>
 The FTP username, usually the $username from the site&apos;s publish profile
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.Url">
<summary>
 The url of the website, usually in the format of https://&lt;yourwebsite&gt;.scm.azurewebsites.net
</summary>
</member>
<member name="T:Fake.Azure.WebJobs.WebSite">
<summary>
 The website that webjobs are deployed to
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.Azure.WebJobs.WebJob.DirectoryToPackage">
<summary>
 The directory path of the webjob to zip
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.Project">
<summary>
 The project to be zipped and deployed as a webjob
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.JobType">
<summary>
 Specifies what type of webjob this is. Note that this also determines it&apos;s deployment location on Azure
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.Name">
<summary>
 The name of the web job, this will also be the name out of zip file.
</summary>
</member>
<member name="T:Fake.Azure.WebJobs.WebJob">
<summary>
 WebJob type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Azure.WebJobs.WebJobType">
<summary>
 The running modes of webjobs
</summary>
</member>
<member name="M:Fake.Azure.WebJobs.DeployWebJobs(Microsoft.FSharp.Collections.FSharpList{Fake.Azure.WebJobs.WebSite})">
<summary>
 This task to can be used deploy a prebuilt webjob zip to a website
 ## Parameters

  - `webSites` - The websites and webjobs to deploy.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.Azure.WebJobs.PackageWebJobs(Microsoft.FSharp.Collections.FSharpList{Fake.Azure.WebJobs.WebSite})">
<summary>
 This task to can be used create a zip for each webjob to deploy to a website
 The output structure is: `outputpath/{websitename}/webjobs/{continuous/triggered}/{webjobname}.zip`
 ## Parameters

  - `webSites` - The websites and webjobs to build zips from.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Azure.WebJobs">
<summary>
 Contains tasks to package and deploy [Azure Web Jobs](http://azure.microsoft.com/en-gb/documentation/articles/web-sites-create-web-jobs/) via the [Kudu](https://github.com/projectkudu/kudu) Zip controller
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.AzureHelper.AzureEmulatorParams">
<summary>
 A type for the controlling parameter
</summary>
</member>
<member name="M:Fake.AzureHelper.ResetDevStorage``1(``0)">
<summary>
 Resets the devstore (BLOB, Queues and Tables)
</summary>
</member>
<member name="M:Fake.AzureHelper.StartComputeEmulator``1(``0)">
<summary>
 Starts the compute emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StopComputeEmulator``1(``0)">
<summary>
 Stops the compute emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StartStorageEmulator``1(``0)">
<summary>
 Starts the staorage emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StopStorageEmulator``1(``0)">
<summary>
 Stops the storage emulator
</summary>
</member>
<member name="P:Fake.AzureHelper.AzureEmulatorDefaults">
<summary>
 The default parameter of emulator
</summary>
</member>
<member name="T:Fake.AzureHelper">
<summary>
 Contains tasks to control the local Azure Emulator
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.Boot.CommandHandler.Interact">
<summary>
 Runs the handler with the default environment.
</summary>
</member>
<member name="T:Fake.Boot.CommandHandler">
<summary>
 Represents a command line handler.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.Boot.CommandEnvironment.Default">
<summary>
 The default environment.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Boot.CommandEnvironment">
<summary>
 Abstracts over command-line environment features.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Boot.Stage">
<summary>
 Stage of execution for a boot system.
</summary>
</member>
<member name="P:Fake.Boot.Config.SourceDirectory">
<summary>
 The full path to the root folder.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetSourceUrl">
<summary>
 The URL of the NuGet source to use.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetPackagesDirectory">
<summary>
 Full path to the `packages` directory for storing NuGet packages.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetDependencies">
<summary>
 List of automatically installed and NuGet dependencies.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetCredentials">
<summary>
 The credentials to use when authenticating to NuGet, if any.
</summary>
</member>
<member name="P:Fake.Boot.Config.IncludesFile">
<summary>
 Full path to the auto-generated fsx file with include statements.
</summary>
</member>
<member name="P:Fake.Boot.Config.FrameworkName">
<summary>
 Framework name for assembly resolution.
</summary>
</member>
<member name="M:Fake.Boot.Config.Default(System.String)">
<summary>
 The default configuration for a given source directory.
</summary>
</member>
<member name="T:Fake.Boot.Config">
<summary>
 Configures the boostrapping process.
</summary>
</member>
<member name="P:Fake.Boot.NuGetDependency.Version">
<summary>
 The version specification.
</summary>
</member>
<member name="P:Fake.Boot.NuGetDependency.PackageId">
<summary>
 The identifer of the package, such as &quot;FAKE&quot;.
</summary>
</member>
<member name="M:Fake.Boot.NuGetDependency.Create(System.String)">
<summary>
 The default pacakage dependency - take latest including pre-release.
</summary>
</member>
<member name="T:Fake.Boot.NuGetDependency">
<summary>
 Specifies NuGet package dependencies.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.SemanticVersion">
<summary>
 Pick the given semantic version, such as &quot;2.1.170-alpha&quot;.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.LatestPreRelease">
<summary>
 Pick the latest available version, including pre-release versions.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.Latest">
<summary>
 Pick the latest available version.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion">
<summary>
 Specifies which version of the NuGet package to install.
</summary>
</member>
<member name="M:Fake.Boot.Prepare(Fake.Boot.Config)">
<summary>
 The main function intended to be executed in the BOOT phase of
 boostrapping scripts.
</summary>
</member>
<member name="M:Fake.Boot.ParseCommandLine(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Detects boot-specific commands.
</summary>
</member>
<member name="M:Fake.Boot.HandlerForArgs(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Creates the CommandHandler from the 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.Boot.Implementation.IsBootScript(System.String)">
<summary>
 Checks if the F# script file is a bootstrapping script.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.Boot.Implementation.FsiArgs(Fake.Boot.CommandEnvironment,Fake.Boot.Stage)">
<summary>
 Computes extra command-line arguments to enable bootstrapping FAKE scripts.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Boot.Implementation">

</member>
<member name="T:Fake.Boot">
<summary>
 Implements support for boostrapping FAKE scripts.  A bootstrapping
 `build.fsx` script executes twice (in two stages), allowing to
 download dependencies with NuGet and do other preparatory work in
 the first stage, and have these dependencies available in the
 second stage.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.BuildServerHelper.TraceMode">
<summary>
 The trace mode option.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.BuildServerHelper.BuildServer">
<summary>
 The server type option.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isLocalBuild">
<summary>
 Is true when the current build is a local build.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildVersion">
<summary>
 The current build version as detected from the current build server.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildServer">
<summary>
 The current build server
</summary>
</member>
<member name="P:Fake.BuildServerHelper.appVeyorBuildVersion">
<summary>
 AppVeyor build number
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.ccBuildLabel">
<summary>
 CruiseControl.NET Build label
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.jenkinsBuildNumber">
<summary>
 Build number retrieved from Jenkins
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.travisBuildNumber">
<summary>
 Build number retrieved from Travis
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.tcBuildNumber">
<summary>
 Build number retrieved from TeamCity
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.xmlOutputFile">
<summary>
 Defines the XML output file - used for build servers like CruiseControl.NET.
 This output file can be specified by using the *logfile* build parameter.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.localBuildLabel">
<summary>
 A constant label for local builds
 [omit]            
</summary>
</member>
<member name="P:Fake.BuildServerHelper.verbose">
<summary>
 Defines if FAKE will use verbose tracing.
 This flag can be specified by setting the *verbose* build parameter.
</summary>
</member>
<member name="T:Fake.BuildServerHelper">
<summary>
 Contains functions which allow build scripts to interact with a build server.
</summary>
</member>
<member name="M:Fake.CacheHelper.lookup``2(``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``1},System.Collections.Generic.IDictionary{``0,``1})">
<summary>
 Looks for a key in the cache.
 If it is not found the newValueF function is executed and the result is stored in the cache.
</summary>
</member>
<member name="T:Fake.CacheHelper">
<summary>
 Contains functions which allows to deal with a cache.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.applyXslOnConfig(System.String,System.String)">
<summary>
 Applies a Xsl Stylesheet to a config file and writes it back.
 ## Parameters
  - `xsl` - The Xsl stylesheet to apply.
  - `fileName` - The file name of the config file.

 ## Sample

     applyXslOnConfig (navServicePath @@ DEV.xsl) (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConnectionString(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the connection string value and writes it back.   
 ## Parameters
  - `connectionStringKey` - The connection string key name for which the value should be replaced.
  - `value` - The new connection string value.
  - `fileName` - The file name of the config file.     
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateApplicationSetting(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the Application Setting (as opposed to AppSetting) value and writes it back.
 ## Parameters
  - `settingName` - The ApplicationSetting name for which the value should be replaced.
  - `value` - The new ApplicationSetting value.
  - `fileName` - The file name of the config file.

 ## Sample

     updateApplicationSetting &quot;DatabaseName&quot; targetDatabase (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateAppSetting(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the app setting value and writes it back.
 ## Parameters
  - `key` - The AppSettings attribute key name for which the value should be replaced.
  - `value` - The new AppSettings attribute value.
  - `fileName` - The file name of the config file.

 ## Sample

     updateAppSetting &quot;DatabaseName&quot; targetDatabase (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConfigSetting(System.String,System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces an attribute using the given xPath and writes it back.
 ## Parameters
  - `fileName` - The file name of the config file.
  - `xpath` - An XPath term which can be used to replace the attribute.
  - `attribute` - The attribute name for which the value should be replaced.
  - `value` - The new attribute value.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConfig(System.String,System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Reads a config file from the given file name, replaces an attribute using the given xPath and writes it back.
 ## Parameters
  - `xpath` - An XPath term which can be used to replace the attribute.
  - `attribute` - The attribute name for which the value should be replaced.
  - `value` - The new attribute value.
  - `config` - The XElement representing the config.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.writeConfig(System.String,System.Xml.XmlDocument)">
<summary>
 Writes an XmlDocument to a config file.
 ## Parameters
  - `fileName` - The file name of the config file.
  - `config` - The XmlDocument representing the config.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.readConfig(System.String)">
<summary>
 Reads a config file into an XmlDocument.
 ## Parameters
  - `fileName` - The file name of the config file.
</summary>
</member>
<member name="T:Fake.ConfigurationHelper">
<summary>
 Contains functions which allow to read and write config files.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.OtherParams">
<summary>
 Specifies other params for the compilation. Freeform strings.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Debug">
<summary>
 Specifies whether to emit debug information (default is false).
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.References">
<summary>
 Specifies assemblies to reference for the compilation.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Platform">
<summary>
 Specifies the compiled artifact target platform.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Target">
<summary>
 Specifies the compiled artifact target type.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.ToolPath">
<summary>
 Specifies the tool path to csc.exe.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Output">
<summary>
 Specifies the output file name and path.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Default">
<summary>
 The default parameters to the compiler.
</summary>
</member>
<member name="T:Fake.CscHelper.CscParams">
<summary>
 Compiler parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.CscHelper.CscPlatform">
<summary>
 Supported platforms
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.CscHelper.CscTarget">
<summary>
 Supported output types
</summary>
</member>
<member name="M:Fake.CscHelper.Csc(Microsoft.FSharp.Core.FSharpFunc{Fake.CscHelper.CscParams,Fake.CscHelper.CscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles one or more C# source files with the specified parameters.
 ## Parameters

  - `setParams` - Function used to overwrite the default CSC parameters.
  - `inputFiles` - The C# input files.

 ## Sample

     [&quot;file1.cs&quot;; &quot;file2.cs&quot;]
     |&gt; Csc (fun parameters -&gt;
                   { parameters with Output = ...
                                     Target = ...
                                     ... })
</summary>
</member>
<member name="M:Fake.CscHelper.csc(Microsoft.FSharp.Core.FSharpFunc{Fake.CscHelper.CscParams,Fake.CscHelper.CscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given C# source files with the specified parameters.

 ## Parameters

  - `setParams` - Function used to overwrite the default CSC parameters.
  - `inputFiles` - The C# input files.

 ## Returns

 The exit status code of the compile process.

 ## Sample

     [&quot;file1.cs&quot;; &quot;file2.cs&quot;]
     |&gt; csc (fun parameters -&gt;
              { parameters with Output = ...
                                Target = ...
                                ... })
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.CscHelper">
<summary>
 Contains tasks to compile C# source files with CSC.EXE (C# Compiler).
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.OutputPath">
<summary>
 The output path of the generated docs. The default is &quot;./output/&quot;.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.TimeOut">
<summary>
 Allows to specify a timeout for docu. The default is 5 minutes.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.TemplatesPath">
<summary>
 The HTML templates for the generated docs.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.ToolPath">
<summary>
 The tool path - FAKE tries to find docu.exe automatically in any sub folder.
</summary>
</member>
<member name="T:Fake.DocuHelper.DocuParams">
<summary>
 The parameter type for docu.
</summary>
</member>
<member name="M:Fake.DocuHelper.Docu(Microsoft.FSharp.Core.FSharpFunc{Fake.DocuHelper.DocuParams,Fake.DocuHelper.DocuParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Generates a HTML documentation from XML docs via the docu.exe.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default docu parameters.
  - `assemblies` - Sequence of one or more assemblies containing the XML docs.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuDefaults">
<summary>
 The Docu default params
</summary>
</member>
<member name="T:Fake.DocuHelper">
<summary>
 Contains helper functions to run the XML documentation tool &quot;docu&quot;.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.DotCover.DotCoverParams">
<summary>
 The DotCover parameter type for running coverage
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.DotCover.DotCoverMSpec(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.MSpecHelper.MSpecParams,Fake.MSpecHelper.MSpecParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the DotCover &quot;cover&quot; command against the MSpec test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the DotCover report default parameters.
  - `setMSpecParams` - Function used to overwrite the MSpec default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverMSpec 
             (fun dotCoverOptions -&gt; { dotCoverOptions with 
                     Output = artifactsDir @@ &quot;MSpecDotCover.snapshot&quot; }) 
             (fun mSpecOptions -&gt; { mSpecOptions with
                     Silent = true })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverNUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the DotCover &quot;cover&quot; command against the NUnit test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the DotCover report default parameters.
  - `setNUnitParams` - Function used to overwrite the NUnit default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverNUnit 
             (fun dotCoverOptions -&gt; { dotCoverOptions with 
                     Output = artifactsDir @@ &quot;NUnitDotCover.snapshot&quot; }) 
             (fun nUnitOptions -&gt; { nUnitOptions with
                     DisableShadowCopy = true })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverReport(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverReportParams,Fake.DotCover.DotCoverReportParams})">
<summary>
 Runs the DotCover &quot;report&quot; command. This generates a report from a DotCover snapshot
 ## Parameters

  - `setParams` - Function used to overwrite the DotCover report default parameters.

 ## Sample

     DotCoverReport (fun p -&gt; { p with 
                         Source = artifactsDir @@ &quot;DotCover.snapshot&quot;
                         Output = artifactsDir @@ &quot;DotCover.xml&quot;
                         ReportType = DotCoverReportType.Xml })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverMerge(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverMergeParams,Fake.DotCover.DotCoverMergeParams})">
<summary>
 Runs the DotCover &quot;merge&quot; command. This combines dotCover snaphots into a single
 snapshot, enabling you to merge test coverage from multiple test running frameworks
 ## Parameters

  - `setParams` - Function used to overwrite the DotCover merge default parameters.

 ## Sample

     DotCoverMerge (fun p -&gt; { p with 
                         Source = [artifactsDir @@ &quot;NUnitDotCover.snapshot&quot;
                                   artifactsDir @@ &quot;MSpecDotCover.snapshot&quot;]
                         Output = artifactsDir @@ &quot;DotCover.snapshot&quot; }) 
</summary>
</member>
<member name="M:Fake.DotCover.DotCover(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams})">
<summary>
 Runs the DotCover &quot;cover&quot; command, using a target executable (such as NUnit or MSpec) and generates a snapshot file.

 ## Parameters

  - `setParams` - Function used to overwrite the DotCover default parameters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.DotCover.DotCoverDefaults">
<summary>
 The DotCover defaeult parameters
</summary>
</member>
<member name="T:Fake.DotCover">
<summary>
 Contains a task which can be used to run [DotCover](http://www.jetbrains.com/dotcover/) on .NET assemblies.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.DynamicsNav.RTCParams">
<summary>
 The parameter type allows to interact with Dynamics NAV RTC.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.DynamicsNav.DynamicsNavParams">
<summary>
 A parameter type to interact with Dynamics NAV
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.DynamicsNav.NavisionServerType">
<summary>
 A Dynamics NAV server type
</summary>
</member>
<member name="M:Fake.DynamicsNav.analyzeXmlTestResults(System.String,System.String)">
<summary>
 Analyzes the XML-based Dynamics NAV test results from XMLPort 130021
</summary>
</member>
<member name="M:Fake.DynamicsNav.analyzeTestResults(System.String)">
<summary>
 Analyzes the Dynamics NAV test results
</summary>
</member>
<member name="M:Fake.DynamicsNav.ensureAllNAVProcessesHaveStopped(System.TimeSpan)">
<summary>
 Waits until all NAV processes have stopped or fails after given timeout.
 ## Parameters
  - `name` - The name of the processes in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.DynamicsNav.CloseAllNavProcesses(System.Boolean)">
<summary>
 Closes all running Dynamics NAV instances
</summary>
</member>
<member name="M:Fake.DynamicsNav.getNAVProcesses">
<summary>
 Returns all running NAV processes.
</summary>
</member>
<member name="M:Fake.DynamicsNav.OpenPage(Fake.DynamicsNav.RTCParams,System.Int32)">
<summary>
 Opens a page with the given ID on the RTC client
</summary>
</member>
<member name="M:Fake.DynamicsNav.RunCodeunit(Fake.DynamicsNav.RTCParams,System.Int32)">
<summary>
 Runs a codeunit with the given ID on the RTC client
</summary>
</member>
<member name="M:Fake.DynamicsNav.createRTCConnectionInfo(System.String,System.String,System.String,System.Int32,System.String)">
<summary>
 Creates the connection information to a Dynamics NAV RTC instance
</summary>
</member>
<member name="M:Fake.DynamicsNav.CompileAll(Fake.DynamicsNav.DynamicsNavParams)">
<summary>
 Compiles all uncompiled objects in the Dynamics NAV client.
</summary>
</member>
<member name="M:Fake.DynamicsNav.ImportFiles(Fake.DynamicsNav.DynamicsNavParams,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates an import file from the given .txt files and imports it into the Dynamics NAV client.
 If the import fails, then every file will be tried alone.
</summary>
</member>
<member name="M:Fake.DynamicsNav.CreateImportFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates an import file from the given .txt files.
</summary>
</member>
<member name="M:Fake.DynamicsNav.ImportFile(Fake.DynamicsNav.DynamicsNavParams,System.String)">
<summary>
 Imports the given .txt or .fob file into the Dynamics NAV client
</summary>
</member>
<member name="M:Fake.DynamicsNav.ExportAllObjects(Fake.DynamicsNav.DynamicsNavParams,System.String)">
<summary>
 Exports all objects from the Dynamics NAV client to the given .txt or .fob file
</summary>
</member>
<member name="M:Fake.DynamicsNav.ExportObjects(Fake.DynamicsNav.DynamicsNavParams,System.String,System.String)">
<summary>
 Exports objects from the Dynamics NAV client based on the given filter to the given .txt or .fob file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.DynamicsNav.createConnectionInfo(System.String,Fake.DynamicsNav.NavisionServerType,System.String,System.String)">
<summary>
 Creates the connection information to a Dynamics NAV instance.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.DynamicsNav.getNAVPath(System.String)">
<summary>
 Gets the directory of the Dynamics NAV ClassicClient for the given version from the registry.
</summary>
</member>
<member name="M:Fake.DynamicsNav.getNAVClassicPath(System.String)">
<summary>
 Retrieves the the file name of the Dynamics NAV ClassicClient for the given version from the registry.
</summary>
</member>
<member name="T:Fake.DynamicsNav">
<summary>
 Contains helper function which allow to interact with Microsoft Dynamics NAV.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.DynamicsNavFile.NavObject">
<summary>
 A type definition of a Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.splitNavisionFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Splits the given files into individual object files in the specified destination directory.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.fileNameFromObject(Fake.DynamicsNavFile.NavObject,System.String)">
<summary>
 Returns a standardized filename based on the given NavObject.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.objectsInObjectString(System.String)">
<summary>
 Splits an object string into multiple Dynamics NAV objects of type NavObject.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.setVersionTags(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.DateTime,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors.
 It also changes the given tag, resets the modified flag and time stamp.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.modifyNavisionFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.DateTime,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors.
 It also changes the given tag, resets the modified flag and time stamp.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.checkTagsInFile(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Checks a Dynamics NAV file for missing required and invalid tags and raises this as errors
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.checkTagsInObjectString(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getInvalidTags(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Get all invalid tags from a Dynamics NAV version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getMissingRequiredTags(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Get all missing required tags from a Dynamics NAV version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceVersionTag(System.String,System.String,System.String)">
<summary>
 Replaces a version tag in a Dynamics NAV
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceVersionTagList(System.String,System.String)">
<summary>
 Replaces a version tag list from a complete Dynamics NAV object with a new version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceInVersionTag(System.String,System.String,System.String)">
<summary>
 Replaces a version tag in a version tag list from Dynamics NAV object
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.splitVersionTags(System.String)">
<summary>
 Splits a version tag list from Dynamics NAV object into single tags
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getVersionTagList(System.String)">
<summary>
 Returns the version tag list from Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.removeModifiedFlag(System.String)">
<summary>
 Removes the modified flag from a Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceDateTimeInString(System.DateTime,System.String)">
<summary>
 Replaces the timestamp in a Dynamics NAV object.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.DynamicsNavFile.NavObjectDateFormat">
<summary>
 A NAV culture-specific date format.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ObjectSplitRegex">
<summary>
 A Regex which allows to find objects in a Dynamics NAV file.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ObjectRegex">
<summary>
 A Regex which allows to parse objects in a Dynamics NAV file.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.TimeRegex">
<summary>
 A Regex which allows to retrieve the modified time.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.DateRegex">
<summary>
 A Regex which allows to retrieve modified date.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.VersionRegex">
<summary>
 A Regex which allows to retrieve the version list.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ModifiedRegex">
<summary>
 A Regex which allows to retrieve the modified flag.
</summary>
</member>
<member name="T:Fake.DynamicsNavFile">
<summary>
 Provides an abstraction over Dynamics NAV object files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.EnvironmentHelper.MachineDetails">
<summary>
 A record which allows to display lots of machine specific information like machine name, processor count etc.
</summary>
</member>
<member name="T:Fake.EnvironmentHelper.EnvironTarget">
<summary>
 Type alias for System.EnvironmentVariableTarget
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getMachineEnvironment">
<summary>
 Retrieves lots of machine specific information like machine name, processor count etc.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getDrivesInfo">
<summary>
 Retrieves information about the hard drives
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getInstalledDotNetFrameworks">
<summary>
 Returns a sequence with all installed .NET framework versions
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.encoding">
<summary>
 Contains the IO encoding which is given via build parameter &quot;encoding&quot; or the default encoding if no encoding was specified.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.convertWindowsToCurrentPath(System.String)">
<summary>
 Convert the given windows path to a path in the current system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.directorySeparator">
<summary>
 The directory separator string. On most systems / or \
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.documentsFolder">
<summary>
 The path to the personal documents
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getTargetPlatformDir(System.String)">
<summary>
 Gets the local directory for the given target platform
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.TargetPlatformPrefix">
<summary>
 The path of the current target platform
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.platformInfoAction(System.Diagnostics.ProcessStartInfo)">
<summary>
 Modifies the ProcessStartInfo according to the platform semantics
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.monoArguments">
<summary>
 Arguments on the Mono executable
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isMono">
<summary>
 Determines if the current system is a mono system
 Todo: Detect mono on windows
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isLinux">
<summary>
 Determines if the current system is a Linux system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isMacOS">
<summary>
 Determines if the current system is a MacOs system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isUnix">
<summary>
 Determines if the current system is an Unix system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.SystemRoot">
<summary>
 The system root environment variable. Typically &quot;C:\Windows&quot;
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFilesX86">
<summary>
 The path of Program Files (x86)
 It seems this covers all cases where PROCESSOR\_ARCHITECTURE may misreport and the case where the other variable 
 PROCESSOR\_ARCHITEW6432 can be null
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFiles">
<summary>
 The path of the &quot;Program Files&quot; folder - might be x64 on x64 machine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParam(System.String)">
<summary>
 Returns the value of the build parameter with the given name if it was set and otherwise an empty string
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParamOrDefault(System.String,System.String)">
<summary>
 Returns the value of the build parameter with the given name was set if it was set and otherwise the given default value
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.hasBuildParam(System.String)">
<summary>
 Returns if the build parameter with the given name was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.appSetting(System.String)">
<summary>
 Retrieves the application settings variable with the given name
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVarOrNone(System.String)">
<summary>
 Retrieves the environment variable or None
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVarOrDefault(System.String,System.String)">
<summary>
 Retrieves the environment variable with the given name or returns the default if no value was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.clearProcessEnvironVar(System.String)">
<summary>
 Clears the environment variable with the given name for the current process.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setProcessEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name for the current process.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVars(System.EnvironmentVariableTarget)">
<summary>
 Retrieves all environment variables from the given target
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.op_AtAt(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.combinePaths(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVar(System.String)">
<summary>
 Retrieves the environment variable with the given name
</summary>
</member>
<member name="T:Fake.EnvironmentHelper">
<summary>
 This module contains functions which allow to read and write environment variables and build parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FSIHelper.runBuildScript(System.Boolean,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given buildscript with fsi.exe
</summary>
</member>
<member name="M:Fake.FSIHelper.runBuildScriptAt``1(``0,System.Boolean,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given buildscript with fsi.exe at the given working directory.
</summary>
</member>
<member name="M:Fake.FSIHelper.runBuildScriptWithFsiArgsAt``1(``0,System.Boolean,Fake.FSIHelper.FsiArgs,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given buildscript with fsi.exe at the given working directory.  Provides full access to Fsi options and args.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeBuildScriptWithArgsAndReturnMessages``1(``0,System.String,System.String[])">
<summary>
 Run the given buildscript with fsi.exe and allows for extra arguments to the script. Returns output.
</summary>
</member>
<member name="M:Fake.FSIHelper.runFAKEScriptWithFsiArgsAndRedirectMessages``1(``0,System.Boolean,Fake.FSIHelper.FsiArgs,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Run the given FAKE script with fsi.exe at the given working directory. Provides full access to Fsi options and args. Redirect output and error messages.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSIWithScriptArgsAndReturnMessages``1(``0,System.String,System.String[])">
<summary>
 Run the given build script with fsi.exe and allows for extra arguments to the script. Returns output.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSIWithArgs(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given build script with fsi.exe and allows for extra arguments to FSI.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSI(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given buildscript with fsi.exe
</summary>
</member>
<member name="M:Fake.FSIHelper.fsiStartInfo(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Diagnostics.ProcessStartInfo)">
<summary>
 Creates a ProcessStartInfo which is configured to the F# Interactive.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.FSIHelper.fsiPath">
<summary>
 The path to the F# Interactive tool.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.FSIHelper">
<summary>
 Contains helper functions which allow to interact with the F# Interactive.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FSharpFormatting.run(System.String)">
<summary>
 Runs fsformatting.exe with the given command in the given repository directory.
</summary>
</member>
<member name="P:Fake.FSharpFormatting.toolPath">
<summary>
 Specifies the fsformatting executable
</summary>
</member>
<member name="T:Fake.FSharpFormatting">
<summary>
 Contains tasks which allow to run FSharp.Formatting for generating documentation.
</summary>
</member>
<member name="M:Fake.FileHelper.directory(System.String)">
<summary>
 Get the directory of the specified path
 ## Parameters

 - &apos;path&apos; - The path from which the directory is retrieved.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.FileHelper.fileNameWithoutExt(System.String)">
<summary>
 Get the filename for the specified path without it&apos;s extension
 ## Parameters

 - &apos;path&apos; - The path from which the filename is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.filename(System.String)">
<summary>
 Get the filename for the specified path
 ## Parameters

 - &apos;path&apos; - The path from which the filename is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.hasExt(System.String,System.String)">
<summary>
 Tests whether the file has specified extensions (containing the leading &apos;.&apos;)
 ## Parameters

 - &apos;extension&apos; - The extension to fine containing the leading &apos;.&apos;.
 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.changeExt(System.String,System.String)">
<summary>
 Change the extension of the file.
 ## Parameters

 - &apos;extension&apos; - The new extension containing the leading &apos;.&apos;.
 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.ext(System.String)">
<summary>
 Get the filename extension including the leading &apos;.&apos;, or an empty string if the file has no extension.
 ## Parameters

 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.FileVersion(System.String)">
<summary>
 Get the version a file.
 ## Parameters

  - &apos;fileName&apos; - Name of file from which the version is retrieved. The path can be relative.
</summary>
</member>
<member name="M:Fake.FileHelper.ReplaceInFiles(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replaces all occurences of the patterns in the given files with the given replacements.
 ## Parameters

  - `replacements` - A sequence of tuples with the patterns and the replacements.
  - `files` - The files to process.
</summary>
</member>
<member name="M:Fake.FileHelper.WriteConfigFile``2(System.String,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
<summary>
 Creates a config file with the parameters as &quot;key;value&quot; lines
</summary>
</member>
<member name="M:Fake.FileHelper.MoveFile(System.String,System.String)">
<summary>
 Moves a single file to the target and overwrites the existing file.
 ## Parameters
 
  - `target` - The target directory.
  - `fileName` - The FileName.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyRecursive(System.String,System.String)">
<summary>
 Copies the file structure recursively.
</summary>
</member>
<member name="M:Fake.FileHelper.copyRecursive(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
<summary>
 Copies the file structure recursively.
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatch(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks the srcFiles for changes to the last release.
 ## Parameters
 
  - `lastReleaseDir` - The directory of the last release.
  - `patchDir` - The target directory.
  - `srcFiles` - The source files.
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatchWithFindOldFileFunction(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.String}})">
<summary>
 Checks the srcFiles for changes to the last release.
 ## Parameters
 
  - `lastReleaseDir` - The directory of the last release
  - `patchDir` - The target directory
  - `srcFiles` - The source files
  - `findOldFileF` - A function which finds the old file
</summary>
</member>
<member name="M:Fake.FileHelper.TestDir(System.String)">
<summary>
 Checks if the directory exists
</summary>
</member>
<member name="M:Fake.FileHelper.CompareFiles(System.Boolean,System.String,System.String)">
<summary>
 Compares the given files for changes.
 If delete is set to true then equal files will be removed.
</summary>
</member>
<member name="M:Fake.FileHelper.FilesAreEqual(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Checks if the two files are byte-to-byte equal.
</summary>
</member>
<member name="M:Fake.FileHelper.AppendTextFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all given files to one file.
 ## Parameters
 
  - `newFileName` - The target FileName.
  - `files` - The original FileNames as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.ReadCSVFile(System.String)">
<summary>
 Reads a csv file line by line
 delimiter is a ,
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDirs(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Deletes multiple directories
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDirs(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Cleans multiple directories
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDir(System.String)">
<summary>
 Cleans a directory by removing all files and sub-directories.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyDir(System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean})">
<summary>
 Copies a directory recursivly. If the target directory does not exist, it will be created.
 ## Parameters
 
  - `target` - The target directory.
  - `source` - The source directory.
  - `filterFile` - A file filter predicate.
</summary>
</member>
<member name="M:Fake.FileHelper.allFiles(System.String)">
<summary>
 Includes all files
</summary>
</member>
<member name="M:Fake.FileHelper.excludeSVNFiles(System.String)">
<summary>
 Exclude SVN files (path with .svn)
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target - Alias for Copy
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The orginal file names.
</summary>
</member>
<member name="M:Fake.FileHelper.SilentCopy(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies a list of files to the specified directory without any output.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - List of files to copy.
</summary>
</member>
<member name="M:Fake.FileHelper.Rename(System.String,System.String)">
<summary>
 Renames the file to the target file name.
 ## Parameters
 
  - `target` - The target file name.
  - `file` - The orginal file name.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyCached(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files from a cache folder.
 If the files are not cached or the original files have a different write time the cache will be refreshed.
 ## Parameters
 
  - `target` - The target FileName.
  - `cacheDir` - The cache directory.
  - `files` - The orginal files.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyTo(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the given files to the target.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The original file names as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.Copy(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The original file names as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyWithSubfoldersTo(System.String,System.Collections.Generic.IEnumerable{Fake.FileSystem.FileIncludes})">
<summary>
 Copies several file groups, each represented by a FileIncludes object,
 to the target folder preserving the folder structure
 starting from the BaseDirectory of each FileIncludes.
 ## Parameters

  - `target` - The target directory.
  - `files` - A sequence of file groups.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFileWithSubfolder(System.String,System.String,System.String)">
<summary>
 Copies a single file to the target folder preserving the folder structure
 starting from the specified base folder.
 ## Parameters

  - `baseDir` - The base directory.
  - `target` - The target directory.
  - `fileName` - The file name.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFileIntoSubFolder(System.String,System.String)">
<summary>
 Copies a single file to a relative subfolder of the target.
 ## Parameters

  - `target` - The target directory
  - `fileName` - The fileName
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.FileHelper.CopyFile(System.String,System.String)">
<summary>
 Copies a single file to the target and overwrites the existing file.
 ## Parameters
 
  - `target` - The target directory or file.
  - `fileName` - The FileName.
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoNameSections|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining FileInfoNameSections.
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoFullName|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining file name.
</summary>
</member>
<member name="M:Fake.FileHelper.|EndsWith|_|(System.String,System.String)">
<summary>
 Active Pattern for determining file extension.
</summary>
</member>
<member name="M:Fake.FileHelper.|File|Directory|(System.IO.FileSystemInfo)">
<summary>
 Active pattern which discriminates between files and directories.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Deletes the given files.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteFile(System.String)">
<summary>
 Deletes a file if it exists.
</summary>
</member>
<member name="M:Fake.FileHelper.CreateFile(System.String)">
<summary>
 Creates a file if it does not exist.
</summary>
</member>
<member name="M:Fake.FileHelper.CreateDir(System.String)">
<summary>
 Creates a directory if it does not exist.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDir(System.String)">
<summary>
 Deletes a directory if it exists.
</summary>
</member>
<member name="M:Fake.FileHelper.SetReadOnly(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Sets all given files readonly.
</summary>
</member>
<member name="M:Fake.FileHelper.SetDirReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets all files in the directory readonly.
</summary>
</member>
<member name="M:Fake.FileHelper.setDirectoryReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.recursively(Microsoft.FSharp.Core.FSharpFunc{System.IO.DirectoryInfo,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,Microsoft.FSharp.Core.Unit},System.IO.DirectoryInfo)">
<summary>
 Performs the given actions on all files and subdirectories
</summary>
</member>
<member name="T:Fake.FileHelper">
<summary>
 Contains helper function which allow to deal with files and directories.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FileSystem.FileIncludes.SetBaseDirectory(System.String)">
<summary>
 Sets a directory as BaseDirectory.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FileSystem.FileIncludes.ButNot(System.String)">
<summary>
 Ignores files with the given pattern
</summary>
</member>
<member name="M:Fake.FileSystem.FileIncludes.And(System.String)">
<summary>
 Adds the given pattern to the file includes
</summary>
</member>
<member name="T:Fake.FileSystem.FileIncludes">
<summary>
 Internal representation of a file set.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FileSystem.ScanImmediately``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Scans immediately for include files - all matching files will be memoized.
</summary>
</member>
<member name="M:Fake.FileSystem.Scan``1(``0)">
<summary>
 Lazy scan for include files.
 Will be processed at the time when needed.
</summary>
</member>
<member name="M:Fake.FileSystem.AllFilesMatching(System.String)">
<summary>
 Includes a single pattern and scans the files - !! x = AllFilesMatching x
</summary>
</member>
<member name="M:Fake.FileSystem.findToolFolderInSubPath(System.String,System.String)">
<summary>
 Looks for a tool in all subfolders - returns the folder where the tool was found.
</summary>
</member>
<member name="M:Fake.FileSystem.findToolInSubPath(System.String,System.String)">
<summary>
 Looks for a tool first in its default path, if not found in all subfolders of the root folder - returns the tool file name.
</summary>
</member>
<member name="M:Fake.FileSystem.op_BangPlus(System.String)">
<summary>
 Include prefix operator
</summary>
</member>
<member name="M:Fake.FileSystem.op_BangBang(System.String)">
<summary>
 Includes a single pattern and scans the files - !! x = AllFilesMatching x
</summary>
</member>
<member name="M:Fake.FileSystem.op_MinusMinus(Fake.FileSystem.FileIncludes,System.String)">
<summary>
 Exclude operator
</summary>
</member>
<member name="M:Fake.FileSystem.op_PlusPlus(Fake.FileSystem.FileIncludes,System.String)">
<summary>
 Add Include operator
</summary>
</member>
<member name="M:Fake.FileSystem.SetBaseDir(System.String,Fake.FileSystem.FileIncludes)">
<summary>
 Sets a directory as baseDirectory for fileIncludes. 
</summary>
</member>
<member name="M:Fake.FileSystem.Include(System.String)">
<summary>
 Include files
</summary>
</member>
<member name="M:Fake.FileSystem.Log(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Logs the given files with the message.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FileSystem">
<summary>
 This module contains a file pattern globbing implementation.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isFile(System.String)">
<summary>
 Detects whether the given path is a file.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isDirectory(System.String)">
<summary>
 Detects whether the given path is a directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.ensureDirectory(System.String)">
<summary>
 Checks if the given directory exists. If not then this functions creates the directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.ensureDirExists(System.IO.DirectoryInfo)">
<summary>
 Ensure that directory chain exists. Create necessary directories if necessary.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.directoryExists(System.String)">
<summary>
 Checks if the directory exists on disk.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isInFolder(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Checks if the file is in a subfolder of the dir.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isSubfolderOf(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
<summary>
 Checks if dir1 is a subfolder of dir2. If dir1 equals dir2 the function returns also true.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.normalizeFileName(System.String)">
<summary>
 Normalizes a filename.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.allFilesExist(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks if all given files exist.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.checkFileExists(System.String)">
<summary>
 Raises an exception if the file doesn&apos;t exist on disk.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileExists(System.String)">
<summary>
 Checks if the file exists on disk.
</summary>
</member>
<member name="P:Fake.FileSystemHelper.fullAssemblyPath">
<summary>
 Get the full location of the current assembly.
</summary>
</member>
<member name="P:Fake.FileSystemHelper.currentDirectory">
<summary>
 Gets the current directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.FindFirstMatchingFile(System.String,System.String)">
<summary>
 Gets the first file in the directory matching the search pattern or throws an error if nothing was found.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.TryFindFirstMatchingFile(System.String,System.String)">
<summary>
 Gets the first file in the directory matching the search pattern as an option value.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.filesInDirMatching(System.String,System.IO.DirectoryInfo)">
<summary>
 Finds all the files in the directory matching the search pattern.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.filesInDir(System.IO.DirectoryInfo)">
<summary>
 Gets all files in the directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.subDirectories(System.IO.DirectoryInfo)">
<summary>
 Gets all subdirectories of a given directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.DirectoryName(System.String)">
<summary>
 Gets the directory part of a filename.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.FullName(System.String)">
<summary>
 Converts a filename to it&apos;s full file system name.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileSystemInfo(System.String)">
<summary>
 Creates a FileInfo or a DirectoryInfo for the given path
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileInfo(System.String)">
<summary>
 Creates a FileInfo for the given path.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.directoryInfo(System.String)">
<summary>
 Creates a DirectoryInfo for the given path.
</summary>
</member>
<member name="T:Fake.FileSystemHelper">
<summary>
 Contains helpers which allow to interact with the file system.
</summary>
</member>
<member name="M:Fake.FileUtils.mv(System.String,System.String)">
<summary>
 Like &quot;mv&quot; in a shell. Moves/renames a file
 &lt;param name=&quot;src&quot;&gt;The source&lt;/param&gt;
 &lt;param name=&quot;dest&quot;&gt;The destination&lt;/param&gt;
</summary>
</member>
<member name="M:Fake.FileUtils.popd">
<summary>
 Restore the previous directory stored in the stack
</summary>
</member>
<member name="M:Fake.FileUtils.pushd(System.String)">
<summary>
 Store the current directory in the directory stack before changing to a new one
</summary>
</member>
<member name="P:Fake.FileUtils.dirStack">
<summary>
 The stack of directories operated on by pushd and popd
</summary>
</member>
<member name="M:Fake.FileUtils.pwd">
<summary>
 Gets working directory
</summary>
</member>
<member name="M:Fake.FileUtils.cd(System.String)">
<summary>
 Changes working directory
</summary>
</member>
<member name="M:Fake.FileUtils.chdir(System.String)">
<summary>
 Changes working directory
</summary>
</member>
<member name="M:Fake.FileUtils.cp(System.String,System.String)">
<summary>
 Like &quot;cp&quot; in a shell. Copies a single file.
 &lt;param name=&quot;src&quot;&gt;The source&lt;/param&gt;
 &lt;param name=&quot;dest&quot;&gt;The destination&lt;/param&gt;
</summary>
</member>
<member name="M:Fake.FileUtils.cp_r(System.String,System.String)">
 <summary>
 Like "cp -r" in a shell. Copies a file or directory recursively.
 </summary>
 <param name="src">The source</param>
 <param name="dest">The destination</param>
</member>
<member name="M:Fake.FileUtils.mkdir(System.String)">
<summary>
 Creates a directory if it doesn&apos;t exist.
</summary>
</member>
<member name="M:Fake.FileUtils.rm_rf(System.String)">
<summary>
 Like &quot;rm -rf&quot; in a shell. Removes files recursively, ignoring nonexisting files
</summary>
</member>
<member name="M:Fake.FileUtils.rm(System.String)">
<summary>
 Deletes a file if it exists
</summary>
</member>
<member name="T:Fake.FileUtils">
<summary>
 Shell-like functions. Similar to [Ruby&apos;s FileUtils](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/rake/rdoc/FileUtils.html).
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.TimeOut">
<summary>
 A timeout for the test runner
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.CustomOptions">
<summary>
 Custom options to pass to Fixie runner
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.ToolPath">
<summary>
 FileName of the Fixie runner
</summary>
</member>
<member name="T:Fake.FixieHelper.FixieParams">
<summary>
 Parameter type to configure the Fixie runner
</summary>
</member>
<member name="M:Fake.FixieHelper.Fixie(Microsoft.FSharp.Core.FSharpFunc{Fake.FixieHelper.FixieParams,Fake.FixieHelper.FixieParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to run [Fixie](http://patrick.lioi.net/fixie/) on test libraries.
 ## Parameters

  - `setParams` - Function used to overwrite the Fixie default parameters.
  - `assemblies` - The file names of the test assemblies.

 ## Sample

     !! (testDir @@ &quot;Test.*.dll&quot;) 
       |&gt; Fixie (fun p -&gt; { p with CustomOptions = [&quot;custom&quot;,&quot;1&quot;; &quot;test&quot;,2] })
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieDefaults">
<summary>
 Fixie default parameters - tries to locate Fixie.Console.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.FixieHelper">
<summary>
 Contains tasks to run [Fixie](http://patrick.lioi.net/fixie/) unit tests.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.OtherParams">
<summary>
 Specifies other params for the compilation. Freeform strings.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Debug">
<summary>
 Specifies whether to emit debug information (default is false).
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.References">
<summary>
 Specifies files to reference for the compilation.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Platform">
<summary>
 Specifies the compiled artifact target platform.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.FscTarget">
<summary>
 Specifies the compiled artifact target type.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Output">
<summary>
 Specifies the output file name and path.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Default">
<summary>
 The default parameters to the compiler service.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParams">
<summary>
 &apos;fsc.exe&apos; command line parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FscHelper.FscPlatform">
<summary>
 The &apos;fsc.exe&apos; output platforms
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FscHelper.FscTarget">
<summary>
 The &apos;fsc.exe&apos; output target types
</summary>
</member>
<member name="M:Fake.FscHelper.Fsc(Microsoft.FSharp.Core.FSharpFunc{Fake.FscHelper.FscParams,Fake.FscHelper.FscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles one or more F# source files with the specified parameters.
 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; Fsc (fun parameters -&gt;
                   { parameters with Output = ...
                                     FscTarget = ...
                                     ... })
</summary>
</member>
<member name="M:Fake.FscHelper.fsc(Microsoft.FSharp.Core.FSharpFunc{Fake.FscHelper.FscParams,Fake.FscHelper.FscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given F# source files with the specified parameters.

 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Returns

 The exit status code of the compile process.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; fsc (fun parameters -&gt;
              { parameters with Output = ...
                                FscTarget = ...
                                ... })
</summary>
</member>
<member name="M:Fake.FscHelper.fscList(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given source file with the given options. If no options
 given (i.e. the second argument is an empty list), by default tries
 to behave the same way as would the command-line &apos;fsc.exe&apos; tool.
</summary>
</member>
<member name="T:Fake.FscHelper">
<summary>
 Contains tasks to compiles F# source file with the [FSharp.Compiler.Service](https://github.com/fsharp/FSharp.Compiler.Service).
 There is also a tutorial about the [F# compiler tasks](../fsc.html) available.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FtpHelper.uploadAFolder(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Uploads a given local folder to a given root dir on a FTP server.
 ## Parameters
  - `srcPath` - The local server path from which files need to be uploaded
  - `rootDir` - The remote root dir where files need to be uploaded, leave this as empty, if files need to be uploaded to root dir of FTP server
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.createAFolder(System.String,System.String,System.String,System.String)">
<summary>
 Creates a matching folder in FTP folder, if not already present.
 ## Parameters
  - `destPath` - The full name of folder which needs to be created, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.isFolderPresent(System.String,System.String,System.String,System.String)">
<summary>
 Given a folder path, will check if that folder is present at a given root directory of a FTP server.
 ## Parameters
  - `destPath` - The full name of folder which needs to be checked for existance, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.checkInExistingDirList(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Given a folder name, will check if that folder is present at a given root directory of a FTP server.
 ## Parameters
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.uploadAFile(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Uploads a single file from local directory into remote FTP folder.
 ## Parameters
  - `destPath` - The full local file path that needs to be uploaded
  - `srcPath` - The full path to file which needs to be created, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.getFtpDirContents(System.String,System.String,System.String,System.String)">
<summary>
 Gets the contents/listing of files and folders in a given FTP server folder
 ## Parameters
  - `dirPath` - The full name of folder whose content need to be listed
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.regexCheck(System.String,System.String)">
<summary>
 Checks to see if the `ftp content` string containts the string `&lt;DIR&gt;    Given_Folder_Name`
</summary>
</member>
<member name="M:Fake.FtpHelper.dirNameIsValid(System.String)">
<summary>
Partial validation for folder name, based on http://msdn.microsoft.com/en-us/library/aa365247.aspx
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FtpHelper.writeChunkToReqStream(System.Byte[],System.IO.Stream,System.IO.BinaryReader)">
<summary>
 Writes given byte array into the given stream
</summary>
</member>
<member name="M:Fake.FtpHelper.getServerInfo(System.String,System.String,System.String,System.String)">
<summary>
 Gets a connection to the FTP server
</summary>
</member>
<member name="T:Fake.FtpHelper">
<summary>
 Contains helpers which allow to upload a whole folder/specific file into a FTP Server. 
 Uses `Passive Mode` FTP and handles all files as binary (and not ASCII).
 Assumes direct network connectivity to destination FTP server (not via a proxy).
 Does not support FTPS and SFTP.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FxCopHelper.FxCopParams">
<summary>
 Parameter type for the FxCop tool
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FxCopHelper.FxCopErrorLevel">
<summary>
 The FxCop error reporting level
</summary>
</member>
<member name="M:Fake.FxCopHelper.FxCop(Microsoft.FSharp.Core.FSharpFunc{Fake.FxCopHelper.FxCopParams,Fake.FxCopHelper.FxCopParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Run FxCop on a group of assemblies.
</summary>
</member>
<member name="P:Fake.FxCopHelper.FxCopDefaults">
<summary>
 FxCop Default parameters
</summary>
</member>
<member name="M:Fake.FxCopHelper.checkForErrors(System.String)">
<summary>
 This checks the result file with some XML queries for errors
 [omit]
</summary>
</member>
<member name="T:Fake.FxCopHelper">
<summary>
 Contains a task which can be used to run [FxCop](http://msdn.microsoft.com/en-us/library/bb429476(v=vs.80).aspx) on .NET assemblies. There is also a [tutorial](../fxcop.html) for this task available.
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.WorkingDir">
<summary>
 The directory where the process will be started.
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.TimeOut">
<summary>
 The timeout for the process.
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.ToolPath">
<summary>
 (Required) Path to the gacutil
</summary>
</member>
<member name="T:Fake.GACHelper.GACParams">
<summary>
 GAC parameters
</summary>
</member>
<member name="M:Fake.GACHelper.GAC(Microsoft.FSharp.Core.FSharpFunc{Fake.GACHelper.GACParams,Fake.GACHelper.GACParams},System.String)">
<summary>
 Runs gacutil with the given command.
</summary>
</member>
<member name="P:Fake.GACHelper.GACDefaults">
<summary>
 GACutil default parameters
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.GACHelper">
<summary>
 This module contains helper function for the GAC
</summary>
</member>
<member name="M:Fake.Git.Branches.pull(System.String,System.String,System.String)">
<summary>
 Pulls a given branch from the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The name of the remote.
  - `branch` - The name of the branch to pull.
</summary>
</member>
<member name="M:Fake.Git.Branches.pushBranch(System.String,System.String,System.String)">
<summary>
 Pushes the given branch to the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The remote.
  - `branch` - The tag.
</summary>
</member>
<member name="M:Fake.Git.Branches.pushTag(System.String,System.String,System.String)">
<summary>
 Pushes the given tag to the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The remote.
  - `tag` - The tag.
</summary>
</member>
<member name="M:Fake.Git.Branches.push(System.String)">
<summary>
 Pushes all branches to the default remote.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.deleteTag(System.String,System.String)">
<summary>
 Deletes the given tag.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `tag` - The tag which should be deleted.
</summary>
</member>
<member name="M:Fake.Git.Branches.tag(System.String,System.String)">
<summary>
 Tags the current branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `tag` - The new tag.
</summary>
</member>
<member name="M:Fake.Git.Branches.deleteBranch(System.String,System.Boolean,System.String)">
<summary>
 Deletes the given branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `force` - Determines if git should be run with the *force* flag.
  - `branch` - The branch which should be deleted.
</summary>
</member>
<member name="M:Fake.Git.Branches.createBranch(System.String,System.String,System.String)">
<summary>
 Creates a new branch from the given commit.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `newBranchName` - The new branch.
  - `commit` - The commit which git should take as the new HEAD. - can be HEAD, HEAD~1, ... , a branch name or a prefix of a SHA1.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkout(System.String,System.Boolean,System.String)">
<summary>
 Performs a checkout of the given branch to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `create` - Set this to true if the branch is new.
  - `branch` - The new branch.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutNewBranch(System.String,System.String,System.String)">
<summary>
 Creates a new branch based on the given baseBranch and checks it out to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `baseBranch` - The base branch.
  - `branch` - The new branch.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutTracked(System.String,System.String,System.String)">
<summary>
 Performs a checkout of the given branch with an additional tracking branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `trackBranch` - The tracking branch.
  - `branch` - The branch for the checkout.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutBranch(System.String,System.String)">
<summary>
 Performs a checkout of the given branch to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `branch` - The branch for the checkout.
</summary>
</member>
<member name="M:Fake.Git.Branches.revisionsBetween(System.String,System.String,System.String)">
<summary>
 Returns the number of revisions between the two given commits.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit1` - The first commit for which git should find the merge base.
  - `commit2` - The second commit for which git should find the merge base.
</summary>
</member>
<member name="M:Fake.Git.Branches.findMergeBase(System.String,System.String,System.String)">
<summary>
 Returns the SHA1 of the merge base of the two given commits from the given repository.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit1` - The first commit for which git should find the merge base.
  - `commit2` - The second commit for which git should find the merge base.
</summary>
</member>
<member name="M:Fake.Git.Branches.getSHA1(System.String,System.String)">
<summary>
 Returns the SHA1 of the given commit from the given repository.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit for which git should return the SHA1 - can be HEAD, HEAD~1, ... , a branch name or a prefix of a SHA1.
</summary>
</member>
<member name="M:Fake.Git.Branches.getAllBranches(System.String)">
<summary>
 Gets all local and remote branches from the given repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.getRemoteBranches(System.String)">
<summary>
 Gets all remote branches from the given repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.getLocalBranches(System.String)">
<summary>
 Gets all local branches from the given repository.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.Git.Branches">
<summary>
 Contains helper functions which allow to deal with git branches.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.findGitDir(System.String)">
<summary>
 Searches the .git directory recursivly up to the root.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.fixPath(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runSimpleGitCommand(System.String,System.String)">
<summary>
 Runs the git command and returns the first line of the result.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.showGitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion.
 This version doesn&apos;t throw an exception if an error occurs. It just traces the error.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.gitCommandf``1(System.String,Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.gitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.directRunGitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion and returns whether it succeeded.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.fireAndForgetGitCommand(System.String,System.String)">
<summary>
 Fires the given git command ind the given repository directory and returns immediatly.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.getGitResult(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runGitCommandf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Tuple{System.Boolean,System.Collections.Generic.List{System.String},System.String}}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runGitCommand(System.String,System.String)">
<summary>
 Runs git.exe with the given command in the given repository directory.
</summary>
</member>
<member name="P:Fake.Git.CommandHelper.gitPath">
<summary>
 Tries to locate the git.exe via the eviroment variable &quot;GIT&quot;.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.Git.CommandHelper.gitTimeOut">
<summary>
 Specifies a global timeout for git.exe - default is *no timeout*
</summary>
</member>
<member name="T:Fake.Git.CommandHelper">
<summary>
 Contains helpers which allow to interact with [git](http://git-scm.com/) via the command line.
</summary>
</member>
<member name="M:Fake.Git.Commit.Commit(System.String,System.String)">
<summary>
 Commits all files in the given repository with the given message
</summary>
</member>
<member name="T:Fake.Git.Commit">
<summary>
 Contains helper functions which allow to commit to git repositories.
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.setMessage(System.String,System.String)">
<summary>
 Sets the commit message
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.getCommitMessage(System.String)">
<summary>
 Gets the commit message
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.getCommitMessageFileInfo(System.String)">
<summary>
 Returns the commit message file.
</summary>
</member>
<member name="T:Fake.Git.CommitMessage">
<summary>
 Contains helper functions which allow to get and set the git commit message.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Git.FileStatus.FileStatus">
<summary>
 A type which represents a file status in git.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.cleanWorkingCopy(System.String)">
<summary>
 Cleans the working copy by doing a git reset --hard and a clean -f.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfPatch(System.String)">
<summary>
 Returns true if the given repository is in the middle of a patch process.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfRebase(System.String)">
<summary>
 Returns true if the given repository is in the middle of a rebase process.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getRebaseDir(System.String)">
<summary>
 Returns the current rebase directory for the given repository.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfConflictedMerge(System.String)">
<summary>
 Returns true if the working copy is in a conflicted merge otherwise false
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getConflictedFiles(System.String)">
<summary>
 Gets all conflicted files
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getChangedFilesInWorkingCopy(System.String,System.String)">
<summary>
 Gets the changed files since the given revision incl. changes in the working copy
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getAllFiles(System.String)">
<summary>
 Gets all changed files in the current revision
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getChangedFiles(System.String,System.String,System.String)">
<summary>
 Gets the changed files between the given revisions
</summary>
</member>
<member name="T:Fake.Git.FileStatus">
<summary>
 Contains helper functions which can be used to retrieve file status information from git.
</summary>
</member>
<member name="M:Fake.Git.Information.getCurrentHash">
<summary>
 Gets the current hash of the current repository
</summary>
</member>
<member name="M:Fake.Git.Information.getLastTag">
<summary>
 Gets the last git tag of the current repository by calling git describe
</summary>
</member>
<member name="M:Fake.Git.Information.shortlog(System.String)">
<summary>
 Gets the git log in one line
</summary>
</member>
<member name="M:Fake.Git.Information.describe(System.String)">
<summary>
 Gets the last git tag by calling git describe
</summary>
</member>
<member name="M:Fake.Git.Information.isAheadOf(System.String,System.String,System.String)">
<summary>
 Returns true if rev1 is ahead of rev2
</summary>
</member>
<member name="M:Fake.Git.Information.showName(System.String,System.String)">
<summary>
 Returns a friendly name from a SHA1
</summary>
</member>
<member name="M:Fake.Git.Information.isCleanWorkingCopy(System.String)">
<summary>
 Checks if the working copy is clean
</summary>
</member>
<member name="M:Fake.Git.Information.showStatus(System.String)">
<summary>
 Shows the git status
</summary>
</member>
<member name="M:Fake.Git.Information.getCurrentSHA1(System.String)">
<summary>
 Returns the SHA1 of the current HEAD
</summary>
</member>
<member name="M:Fake.Git.Information.getBranchName(System.String)">
<summary>
 Gets the git branch name
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.Git.Information.getVersion(System.String)">
<summary>
 Gets the git version
</summary>
</member>
<member name="T:Fake.Git.Information">
<summary>
 Contains helper functions which can be used to retrieve status information from git.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Git.Merge.MergeType">
<summary>
 Git merge option.
</summary>
</member>
<member name="M:Fake.Git.Merge.merge(System.String,System.String,System.String)">
<summary>
 Performs a merge of the given branch with the current branch
 ## Parameters

  - `repositoryDir` - The git repository.
  - `flags` - Additional flags.
  - `branch` - The branch we want to merge in.
 ## Sample

     merge @&quot;C:\code\Fake&quot; NoFastForwardFlag &quot;master&quot;
</summary>
</member>
<member name="M:Fake.Git.Merge.compareBranches(System.String,System.String,System.String)">
<summary>
 Tests whether branches and their &quot;origin&quot; counterparts have diverged and need merging first.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `local` - The local branch name.
  - `remote` - The remote branch name.
</summary>
</member>
<member name="P:Fake.Git.Merge.NoFastForwardFlag">
<summary>
 Forbids git to use fast-forward merges
</summary>
</member>
<member name="P:Fake.Git.Merge.FastForwardFlag">
<summary>
 Allows git to use fast-forward merges
</summary>
</member>
<member name="M:Fake.Git.Merge.getMergeMessage(System.String)">
<summary>
 Gets the current merge message.
</summary>
</member>
<member name="T:Fake.Git.Merge">
<summary>
 Contains helper functions which allow to deal with git merge.
</summary>
</member>
<member name="M:Fake.Git.Rebase.rebaseOrFallbackOnMerge(System.String,System.String)">
<summary>
 Tries to rebase on top of the given branch.
 If the rebasing process fails a normal merge will be started.
 Returns if the process used merge instead of rebase.
</summary>
</member>
<member name="M:Fake.Git.Rebase.rollBackAndUseMerge(System.String,System.String)">
<summary>
 rebase failed ==&gt; fallback on merge
 [omit]
</summary>
</member>
<member name="M:Fake.Git.Rebase.skip(System.String)">
<summary>
 Restart the rebasing process by skipping the current patch. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.continueRebase(System.String)">
<summary>
 Restart the rebasing process after having resolved a merge conflict. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.abort(System.String)">
<summary>
 Restore the original branch and abort the rebase operation. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.start(System.String,System.String)">
<summary>
 Performs a rebase on top of the given branch with the current branch
</summary>
</member>
<member name="T:Fake.Git.Rebase">
<summary>
 Contains helper functions which allow to deal with git rebase.
</summary>
</member>
<member name="M:Fake.Git.Repository.fullclean(System.String)">
<summary>
 Cleans a directory by removing all files and sub-directories.
 ## Parameters

  - `repositoryDir` - The path of the directory to clean.
</summary>
</member>
<member name="M:Fake.Git.Repository.init(System.String,System.Boolean,System.Boolean)">
<summary>
 Inits a git repository.
 ## Parameters

  - `repositoryDir` - The path of the target directory.
  - `bare` - If the new directory is a bare directory.
  - `shared` - Specifies that the git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. 
</summary>
</member>
<member name="M:Fake.Git.Repository.cloneSingleBranch(System.String,System.String,System.String,System.String)">
<summary>
 Clones a single branch of a git repository.
 ## Parameters

  - `workingDir` - The working directory.
  - `repoUrl` - The URL to the origin.
  - `branchname` - Specifes the target branch.
  - `toPath` - Specifes the new target subfolder.
</summary>
</member>
<member name="M:Fake.Git.Repository.clone(System.String,System.String,System.String)">
<summary>
 Clones a git repository.
 ## Parameters

  - `workingDir` - The working directory.
  - `repoUrl` - The URL to the origin.
  - `toPath` - Specifes the new target subfolder. 
</summary>
</member>
<member name="T:Fake.Git.Repository">
<summary>
 Contains functions which allow basic operations on git repositories.
 All operations assume that the CommandHelper can find git.exe.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetHard(System.String)">
<summary>
 Performs a git reset &quot;hard&quot; to the current HEAD.
 Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetMixed(System.String)">
<summary>
 Performs a git reset &quot;mixed&quot; to the current HEAD.
 Resets the index but not the working tree and reports what has not been updated. 
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetSoft(System.String)">
<summary>
 Performs a git reset &quot;soft&quot; to the current HEAD.
 Does not touch the index file nor the working tree at all.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.hard(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;hard&quot;.
 Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="M:Fake.Git.Reset.mixed(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;mixed&quot;.
 Resets the index but not the working tree and reports what has not been updated. 
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="M:Fake.Git.Reset.soft(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;soft&quot;.
 Does not touch the index file nor the working tree at all.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.Git.Reset">
<summary>
 Contains helper functions which allow to deal with git reset.
</summary>
</member>
<member name="M:Fake.Git.SHA1.showObjectHash(System.String,System.String)">
<summary>
 Shows the SHA1 calculated by git.
 Assumes that the CommandHelper module can find git.exe.
</summary>
</member>
<member name="M:Fake.Git.SHA1.calcGitSHA1(System.String)">
<summary>
 Calculates the SHA1 for a given string like git.
</summary>
</member>
<member name="M:Fake.Git.SHA1.calcSHA1(System.String)">
<summary>
 Calculates the SHA1 for a given string.
</summary>
</member>
<member name="T:Fake.Git.SHA1">
<summary>
 Contains functions which allow the SHA1 of a file with git and without it.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIsRemoteBranch(System.String,System.String)">
<summary>
 Checks if the given branch is a remote branch.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIsLocalBranch(System.String,System.String)">
<summary>
 Checks if the given branch is a local branch.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIfBranchIsAbsent(System.String,System.String)">
<summary>
 Checks if the given branch is absent.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIfBranchExists(System.String,System.String)">
<summary>
 Checks if the given branch exists.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkRevisionExists(System.String,System.String)">
<summary>
 Checks if the given branch exists.
</summary>
</member>
<member name="T:Fake.Git.SanityChecks">
<summary>
 Contains helper function which can be used for sanity checks.
</summary>
</member>
<member name="M:Fake.Git.Staging.StageAll(System.String)">
<summary>
 Adds all files to the staging area
</summary>
</member>
<member name="M:Fake.Git.Staging.StageFile(System.String,System.String)">
<summary>
 Adds a file to the staging area
</summary>
</member>
<member name="T:Fake.Git.Staging">
<summary>
 Contains helper functions which allow to deal with git&apos;s staging area.
</summary>
</member>
<member name="M:Fake.Git.Stash.pop(System.String)">
<summary>
 Remove a single stashed state from the stash list and 
 apply it on top of the current working tree state, 
 i.e., do the inverse operation of git stash save. 
 The working directory must match the index. 
</summary>
</member>
<member name="M:Fake.Git.Stash.push(System.String,System.String)">
<summary>
 Stash the changes in a dirty working directory away.
</summary>
</member>
<member name="T:Fake.Git.Stash">
<summary>
 Contains helper functions which allow to deal with git stash.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.Git.Submodule.Submodule.Status">
<summary>
 Gets the current status.
</summary>
</member>
<member name="M:Fake.Git.Submodule.Submodule.GetRemotePath">
<summary>
 Gets the remote path from the config.
</summary>
</member>
<member name="M:Fake.Git.Submodule.Submodule.GetLocalPath">
<summary>
 Gets the local path from the config.
</summary>
</member>
<member name="T:Fake.Git.Submodule.Submodule">
<summary>
 This record represents a git submodule binding.
</summary>
</member>
<member name="M:Fake.Git.Submodule.add(System.String,System.String,System.String,System.String)">
<summary>
 Adds a submodule to the given super repository.
 ## Parameters

  - `superRepositoryDir` - The super repository.
  - `remotePath` - The path to the remote repository of the submodule.
  - `localPath` - The local path to the submodule.
  - `branch` - The branch to  clone. (can be null)
</summary>
</member>
<member name="M:Fake.Git.Submodule.init(System.String,System.String)">
<summary>
 Inits a submodule with the given name in a subfolder of the given super repository.
 ## Parameters

  - `superRepositoryDir` - The super repository.
  - `name` - The name of the new repository.
</summary>
</member>
<member name="M:Fake.Git.Submodule.getSubModules(System.String)">
<summary>
 Gets all submodules from the given repository directory.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.Git.Submodule">
<summary>
 Contains helper functions which allow to deal with git submodules.
</summary>
</member>
<member name="M:Fake.GuardedAwaitObservable.Async.GuardedAwaitObservable.Static``1(System.IObservable{``0},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Behaves like AwaitObservable, but calls the specified guarding function
 after a subscriber is registered with the observable.
</summary>
</member>
<member name="M:Fake.GuardedAwaitObservable.synchronize``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit},``0})">
<summary>
 Helper that can be used for writing CPS-style code that resumes
 on the same thread where the operation was started.
</summary>
</member>
<member name="T:Fake.GuardedAwaitObservable">

</member>
<member name="M:Fake.HTMLHelpWorkShopHelper.CompileHTMLHelpProject(System.String,System.String)">
<summary>
 Uses the HTML Help Workshop to compile a help project and returns the generated file names of the generated files.
 ## Parameters

  - `helpCompiler` - The filename of the HTML Help WorkShop tool.
  - `projectFile` - The fileName of the help project.
</summary>
</member>
<member name="T:Fake.HTMLHelpWorkShopHelper">
<summary>
 Contains a task which allows to use [HTML Help Workshop](http://msdn.microsoft.com/en-us/library/windows/desktop/ms670169(v=vs.85).aspx) in order to compile a help project.
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Color">
<summary>
 The background color for the message, which can be yellow, red, green, purple, gray, or random. Default value: yellow
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Notify">
<summary>
 Whether or not this message should trigger a notification for people in the room. Default value: false
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.MessageFormat">
<summary>
 The message format, which can either be text or html. Default value: text
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Message">
<summary>
 (Required) The message body
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.From">
<summary>
 (Required) Name the message will appear to be sent from
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.RoomId">
<summary>
 (Required) ID or name of the room to send the notification to
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.AuthToken">
<summary>
 (Required) Auth token from HipChat
</summary>
</member>
<member name="T:Fake.HipChatNotificationHelper.HipChatNotificationParams">
<summary>
 The HipChat notification paramater type
</summary>
</member>
<member name="M:Fake.HipChatNotificationHelper.HipChatNotification(Microsoft.FSharp.Core.FSharpFunc{Fake.HipChatNotificationHelper.HipChatNotificationParams,Fake.HipChatNotificationHelper.HipChatNotificationParams})">
<summary>
 Sends a notification to a HipChat room
 ## Parameters
  - `setParams` - Function used to override the default notification parameters
</summary>
</member>
<member name="M:Fake.HipChatNotificationHelper.validateParams(Fake.HipChatNotificationHelper.HipChatNotificationParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationDefaults">
<summary>
 The default HipChat notification parameters
</summary>
</member>
<member name="T:Fake.HipChatNotificationHelper">
<summary>
 Contains a task to send notification messages to a [HipChat](https://www.hipchat.com/) room
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.XmlDocs">
<summary>
 True -&gt; XML documentation files are merged to produce an XML documentation file for the target assembly.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.UnionMerge">
<summary>
 True -&gt; types with the same name are all merged into a single type in the target assembly.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.TargetPlatform">
<summary>
 v1 or v1.1 or v2 or v4 or version,platform
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.SearchDirectories">
<summary>
 Directories to be used to search for input assemblies
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.DebugInfo">
<summary>
 True (default) -&gt; creates a .pdb file for the output assembly and merges into it any .pdb files found for input assemblies.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Closed">
<summary>
 True -&gt; transitive closure of the input assemblies is computed and added to the list of input assemblies.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AttributeFile">
<summary>
 Path to an assembly that will be used to get all of the assembly-level attributes
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowWildcards">
<summary>
 Wild cards in file names are expanded and all matching files will be used as input.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowMultipleAssemblyLevelAttributes">
<summary>
 Assembly-level attributes names that have the same type are copied over into the target directory
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowDuplicateTypes">
<summary>
 Duplicate types policy
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Libraries">
<summary>
 Assemblies to merge with the primary assembly
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Version">
<summary>
 Version to use for the merged assembly
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.ToolPath">
<summary>
 Path to ILMerge.exe
</summary>
</member>
<member name="T:Fake.ILMergeHelper.ILMergeParams">
<summary>
 Parameter type for ILMerge
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ILMergeHelper.TargetKind">
<summary>
 Option type to configure ILMerge&apos;s target output.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ILMergeHelper.InternalizeTypes">
<summary>
 Option type to configure ILMerge&apos;s processing of internal types.
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.DuplicateTypes">
<summary>
 List of types to allow to be duplicated
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.AllPublicTypes">
<summary>
 All public types are allowed to be duplicated and renamed
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.NoDuplicateTypes">
<summary>
 No duplicates of public types allowed
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes">
<summary>
 Option type to configure ILMerge&apos;s processing of duplicate types.
</summary>
</member>
<member name="M:Fake.ILMergeHelper.ILMerge(Microsoft.FSharp.Core.FSharpFunc{Fake.ILMergeHelper.ILMergeParams,Fake.ILMergeHelper.ILMergeParams},System.String,System.String)">
<summary>
 Uses ILMerge to merge .NET assemblies.
 ## Parameters

  - `setParams` - Function used to create an ILMergeParams value with your required settings. Called with an ILMergeParams value configured with the defaults.
  - `outputFile` - Output file path for the merged assembly.
  - `primaryAssembly` - The assembly you want ILMerge to consider as the primary.
</summary>
</member>
<member name="M:Fake.ILMergeHelper.getArguments(System.String,System.String,Fake.ILMergeHelper.ILMergeParams)">
<summary>
 Builds the arguments for the ILMerge task
 [omit]
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeDefaults">
<summary>
 ILMerge default parameters. Tries to automatically locate ilmerge.exe in a subfolder.
</summary>
</member>
<member name="T:Fake.ILMergeHelper">
<summary>
 Contains task a task which allows to merge .NET assemblies with [ILMerge](http://research.microsoft.com/en-us/people/mbarnett/ilmerge.aspx).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuild.ProjectSystem.ProjectComparison">
<summary>
 Result type for project comparisons.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.MSBuild.ProjectSystem.ProjectFile.ProjectFileName">
<summary>
 The project file name
</summary>
</member>
<member name="P:Fake.MSBuild.ProjectSystem.ProjectFile.Files">
<summary>
 All files which are in &quot;Compile&quot; sections
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.Save(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Saves the project file
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.RemoveFile(System.String)">
<summary>
 Removes a file from the Compile nodes
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.FromFile(System.String)">
<summary>
 Read a Project from a FileName
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.FindDuplicateFiles">
<summary>
 Finds duplicate files which are in &quot;Compile&quot; sections
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.AddFile(System.String)">
<summary>
 Add a file to the Compile nodes
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.MSBuild.ProjectSystem.ProjectFile">
<summary>
 A small abstraction over MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.CompareProjectsTo(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given project files againts the template project and fails if any files are missing.
 For F# projects it is also reporting unordered files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixProjectFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing files to the projects if needed.
 It also removes duplicate files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.RemoveDuplicateFiles(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 It removes duplicate files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixMissingFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing files to the projects if needed.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.findMissingFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given project files againts the template project and returns which files are missing.
 For F# projects it is also reporting unordered files.
</summary>
</member>
<member name="T:Fake.MSBuild.ProjectSystem">
<summary>
 Contains project file comparion tools for MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveAllSpecAndTestDataFiles(System.String)">
<summary>
 Removes all spec and test data references from a project.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveAllNUnitReferences(System.String)">
<summary>
 Removes all NUnit references from a project.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.Nothing``2(``0,``1)">
<summary>
 A Convetion which matches nothing
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllSpecAndTestDataFiles(System.String,System.String)">
<summary>
 All Spec.cs or Spec.fs files and all files containing TestData
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllSpecFiles``1(``0,System.String)">
<summary>
 All Spec.cs or Spec.fs files
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllNUnitReferences``1(``0,System.String)">
<summary>
 All references to nunit.*.dlls
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveTestsFromProject(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.String)">
<summary>
 Removes test data and test files from a given MSBuild project and recursivly from all MSBuild project dependencies.
 ## Parameters

  - `assemblyFilterF` - A filter function for assembly references.
  - `fileFilterF` - A filter function for files in a project.
  - `projectFileName` - The MSBuild project to start.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.createFileName(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeFiles(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeAssemblyReference(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeFilteredElement(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.normalize(System.Xml.Linq.XDocument)">
<summary>
 Converts a MSBuildProject to XML
 [omit]
</summary>
</member>
<member name="T:Fake.MSBuild.SpecsRemovement">
<summary>
 Contains functions which allow to remove side-by-side specs during the build.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuildHelper.MSBuildParams">
<summary>
 A type for MSBuild task parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuildHelper.MSBuildFileLoggerConfig">
<summary>
 A type for MSBuild configuration
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuildHelper.MSBuildLogParameter">
<summary>
 MSBuild log option
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuildHelper.MSBuildVerbosity">
<summary>
 MSBuild verbosity option
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildProject">
<summary>
 An type to represent MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsites(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given web project files in debug mode and copies them to the given websiteDir.
 ## Parameters
  - `outputPath` - The output path.
  - `projectFiles` - The project file paths.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsite(System.String,System.String)">
<summary>
 Builds the given web project file in debug mode and copies it to the given websiteDir.
 ## Parameters
  - `outputPath` - The output path.
  - `projectFile` - The project file path.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildReleaseExt(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files in release mode and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `properties` - A list with tuples of property name and property values.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildWithDefaults(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files in release mode to the default outputs.
 ## Parameters
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildRelease(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildDebug(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuild(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `properties` - A list with tuples of property name and property values.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildWithProjectProperties(System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `properties` - A list with tuples of property name and property values.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.build(Microsoft.FSharp.Core.FSharpFunc{Fake.MSBuildHelper.MSBuildParams,Fake.MSBuildHelper.MSBuildParams},System.String)">
<summary>
 Runs a MSBuild project
 ## Parameters
  - `setParams` - A function that overwrites the default MsBuildParams
  - `project` - A string with the path to the project file to build.

 ## Sample

     let buildMode = getBuildParamOrDefault &quot;buildMode&quot; &quot;Release&quot;
     let setParams defaults =
             { defaults with
                 Verbosity = Some(Quiet)
                 Targets = [&quot;Build&quot;]
                 Properties =
                     [
                         &quot;Optimize&quot;, &quot;True&quot;
                         &quot;DebugSymbols&quot;, &quot;True&quot;
                         &quot;Configuration&quot;, buildMode
                     ]
              }
     build setParams &quot;./MySolution.sln&quot;
           |&gt; DoNothing
</summary>
</member>
<member name="P:Fake.MSBuildHelper.MSBuildLoggers">
<summary>
 Defines the loggers to use for MSBuild task
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.MSBuildHelper.ErrorLoggerName">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.TeamCityLoggerName">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.serializeMSBuildParams(Fake.MSBuildHelper.MSBuildParams)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.MSBuildHelper.getAllParameters``1(``0,``0,``0,``0,``0,``0,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.MSBuildDefaults">
<summary>
 Defines a default for MSBuild task parameters
</summary>
</member>
<member name="M:Fake.MSBuildHelper.getProjectReferences(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.processReferences(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},System.String,System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.getReferenceElements(System.String,System.String,System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.MSBuildHelper.loadProject(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.xname(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msbuildNamespace">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msBuildExe">
<summary>
 Tries to detect the right version of MSBuild.
   - On Linux/Unix Systems we use xBuild.
   - On Windows we try to find a &quot;MSBuild&quot; build parameter or read the MSBuild tool location from the AppSettings file.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSBuildHelper.BuildException">
<summary>
 An exception type to signal build errors.
</summary>
</member>
<member name="T:Fake.MSBuildHelper">
<summary>
 Contains tasks which allow to use MSBuild (or xBuild on Linux/Unix) to build .NET project files or solution files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MSIHelper.MSIParams">
<summary>
 MSI parameter type
</summary>
</member>
<member name="M:Fake.MSIHelper.Uninstall(Microsoft.FSharp.Core.FSharpFunc{Fake.MSIHelper.MSIParams,Fake.MSIHelper.MSIParams},System.String)">
<summary>
 Uninstalls a msi.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSI parameters.
  - `setup` - The setup file name.
</summary>
</member>
<member name="M:Fake.MSIHelper.Install(Microsoft.FSharp.Core.FSharpFunc{Fake.MSIHelper.MSIParams,Fake.MSIHelper.MSIParams},System.String)">
<summary>
 Installs a msi.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSI parameters.
  - `setup` - The setup file name.
</summary>
</member>
<member name="P:Fake.MSIHelper.MSIDefaults">
<summary>
 MSI default parameters  
</summary>
</member>
<member name="T:Fake.MSIHelper">
<summary>
 Contains tasks which allow to run msiexec in order to install or uninstall msi files.
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.NoIsolation">
<summary>
 Run tests in isolation (optional).
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ErrorLevel">
<summary>
 Option which allow to specify if a MSTest error should break the build.
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ToolPath">
<summary>
 Path to MSTest.exe 
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TimeOut">
<summary>
 A timeout for the test runner (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TestSettingsPath">
<summary>
 Path to the Test Settings file (.testsettings)  (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TestMetadataPath">
<summary>
 Path to the Test Metadata file (.vdmdi)  (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ResultsDir">
<summary>
 Test results directory (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.Category">
<summary>
 Test category filter  (optional). The test category filter consists of one or more test category names separated by the logical operators &apos;&amp;&apos;, &apos;|&apos;, &apos;!&apos;, &apos;&amp;!&apos;. The logical operators &apos;&amp;&apos; and &apos;|&apos; cannot be used together to create a test category filter.
</summary>
</member>
<member name="T:Fake.MSTest.MSTestParams">
<summary>
 Parameter type to configure the MSTest.exe.
</summary>
</member>
<member name="T:Fake.MSTest.ErrorLevel">
<summary>
 Option which allow to specify if a MSTest error should break the build.
</summary>
</member>
<member name="M:Fake.MSTest.MSTest(Microsoft.FSharp.Core.FSharpFunc{Fake.MSTest.MSTestParams,Fake.MSTest.MSTestParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs MSTest command line tool on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSTestParams value.
  - `assemblies` - Sequence of one or more assemblies containing Microsoft Visual Studio Unit Test Framework unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\*.Tests.dll&quot;) 
           |&gt; MSTest (fun p -&gt; { p with Category = &quot;group1&quot; })
     )
</summary>
</member>
<member name="M:Fake.MSTest.buildMSTestArgs``1(Fake.MSTest.MSTestParams,``0)">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.MSTest.MSTestDefaults">
<summary>
 MSTest default parameters.
</summary>
</member>
<member name="P:Fake.MSTest.mstestexe">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSTest.mstestPaths">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.MSTest">
<summary>
 Contains tasks to run [MSTest](http://en.wikipedia.org/wiki/Visual_Studio_Unit_Testing_Framework/) unit tests.
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ErrorLevel">
<summary>
 An error level setting to specify whether a failed test should break the build
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.TimeOut">
<summary>
 A timeout for the test runner
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.IncludeTags">
<summary>
 Tests with theses tags are included by MSpec
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ExcludeTags">
<summary>
 Tests with theses tags are ignored by MSpec
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.Silent">
<summary>
 Can be used to run MSpec in silent mode.
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.XmlOutputPath">
<summary>
 Output file path for xml reports (optional).
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.HtmlOutputDir">
<summary>
 Output directory for html reports (optional).
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ToolPath">
<summary>
 FileName of the mspec runner exe. Use mspec-clr4.exe if you are on .NET 4.0 or above.
</summary>
</member>
<member name="T:Fake.MSpecHelper.MSpecParams">
<summary>
 Parameter type to configure the MSpec runner.
</summary>
</member>
<member name="M:Fake.MSpecHelper.MSpec(Microsoft.FSharp.Core.FSharpFunc{Fake.MSpecHelper.MSpecParams,Fake.MSpecHelper.MSpecParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to run [machine.specifications](https://github.com/machine/machine.specifications) on test libraries.
 ## Parameters

  - `setParams` - Function used to overwrite the MSpec default parameters.
  - `assemblies` - The file names of the test assemblies.

 ## Sample

     !! (testDir @@ &quot;Test.*.dll&quot;) 
       |&gt; MSpec (fun p -&gt; {p with ExcludeTags = [&quot;HTTP&quot;]; HtmlOutputDir = reportDir})

 ## Hint
 
 XmlOutputPath expects a full file path whereas the HtmlOutputDir expects a directory name
</summary>
</member>
<member name="M:Fake.MSpecHelper.buildMSpecArgs(Fake.MSpecHelper.MSpecParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecDefaults">
<summary>
 MSpec default parameters - tries to locate mspec-clr4.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.MSpecHelper">
<summary>
 Contains a task to run [machine.specifications](https://github.com/machine/machine.specifications) tests.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MageHelper.MageParams">
<summary>
 Needed information to call MAGE
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MageHelper.MageTrustLevels">
<summary>
 The level of trust to grant the application on client computers.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MageHelper.MageCall">
<summary>
 The supported commands of the MAGE tool
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MageHelper.MageProcessor">
<summary>
 These are the supported processor types of the MAGE tool
</summary>
</member>
<member name="M:Fake.MageHelper.MageRun(Fake.MageHelper.MageParams)">
<summary>
 Executes a full run of MAGE commands: first, it creates a new manifest file. Then it signs the manifest, deploys the application and finally signs the deployment.
</summary>
</member>
<member name="M:Fake.MageHelper.MageSignDeploy(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to sign the deployment of an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageUpdateDeploy(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to update the deployment of an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageDeployApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to deploy an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageSignManifest(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to sign an application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.MageUpdateApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to update an existing application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.MageCreateApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to create a new application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.mageCall(Fake.MageHelper.MageCall,Fake.MageHelper.MageParams)">
<summary>
 Execute the MAGE tool. Adds some parameters, dependent on the MAGE command.
</summary>
</member>
<member name="M:Fake.MageHelper.MageSerializeParams(Fake.MageHelper.MageCall,Fake.MageHelper.MageParams)">
<summary>
 Convert the parameter structure into command line arguments of MAGE
</summary>
</member>
<member name="T:Fake.MageHelper">
<summary>
 Contains helper functions which allow FAKE to call the [Manifest Generation and Editing Tool](http://msdn.microsoft.com/en-us/library/acz3y3te.aspx), in short &apos;MAGE&apos;.
 The intentional use is the creation of a clickonce application.

 ## Certificates
 The MAGE tool wants to sign the manifest using a certificate. It should be clear, that this file is not under source control.
 On the other hand - you want to be able to run the compile batch on each developer machine. How can we achieve that? 
 In the parameter structure, we use a CertFile property and a TmpCertFile property. Whenever the CertFile was not found, the manifest is signed with
 a temporary certificate. And the latter one can be shared in the source control.
</summary>
</member>
<member name="M:Fake.MessageHelper.WaitForMessageFile(System.String,System.TimeSpan)">
<summary>
 Waits for another application to create a output file.
 If the timeout is reached an exception will be raised.
</summary>
</member>
<member name="M:Fake.MessageHelper.WaitForMessageFiles(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
<summary>
 Waits for other applications to create a output files.
 If the timeout is reached an exception will be raised.
</summary>
</member>
<member name="T:Fake.MessageHelper">
<summary>
 Contains helper function which allow FAKE to interact with other applications via message files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MsBuildLogger.ErrorLogger">
<summary>
 TeamCity Logger for MSBuild
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MsBuildLogger.TeamCityLogger">
<summary>
 TeamCity Logger for MSBuild
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.MsBuildLogger.MSBuildLogger.RegisterEvents(Microsoft.Build.Framework.IEventSource)">
<summary>
 Abstract function which registers an event listener.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MsBuildLogger.MSBuildLogger">
<summary>
 Abstract MSBuild Logger class.
</summary>
</member>
<member name="P:Fake.MsBuildLogger.ErrorLoggerFile">
<summary>
 The ErrorLogFile
</summary>
</member>
<member name="M:Fake.MsBuildLogger.errToStr(Microsoft.Build.Framework.BuildErrorEventArgs)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.MsBuildLogger">
<summary>
 Contains Logger implementations for MsBuild.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NCoverHelper.NCoverParams">
<summary>
 The NCover parameter type.
</summary>
</member>
<member name="M:Fake.NCoverHelper.NCover(Microsoft.FSharp.Core.FSharpFunc{Fake.NCoverHelper.NCoverParams,Fake.NCoverHelper.NCoverParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NCover on a group of assemblies.
 ## Parameters

  - `setParams` - Function used to overwrite the NCover default parameters.
  - `assemblies` - The test assemblies, which should be inspected.
  - `excludeAssemblies` - These assemblies are excluded.
</summary>
</member>
<member name="P:Fake.NCoverHelper.NCoverDefaults">
<summary>
 NCover default parameters.
</summary>
</member>
<member name="T:Fake.NCoverHelper">
<summary>
 Contains a task which can be used to run [NCover](http://www.ncover.com/) on .NET assemblies.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NDepend.NDepend(Microsoft.FSharp.Core.FSharpFunc{Fake.NDepend.NDependParams,Fake.NDepend.NDependParams})">
<summary>
 Runs [NDepend](http://www.ndepend.com/) on a .NET project file.
 ## Parameters

  - `setParams` - Function used to manipulate the default NDependDefaults value.

 ## Sample

      NDepend (fun p -&gt; { p with 
                         ProjectFile = currentDirectory @@ &quot;NDependProjectFile.ndproj&quot;
                         CoverageFiles = [artifactsDir @@ &quot;DotCover.xml&quot; ]
              })
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NDepend">
<summary>
 Contains a task which allows to run [NDepend](http://www.ndepend.com/) on .NET project files.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.WorkingDir">
<summary>
 The directory where the process will be started.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.TimeOut">
<summary>
 The timeout for the process.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.ToolPath">
<summary>
 (Required) Path to the NGenutil
</summary>
</member>
<member name="T:Fake.NGenHelper.NGenParams">
<summary>
 NGen parameters
</summary>
</member>
<member name="M:Fake.NGenHelper.Install(Microsoft.FSharp.Core.FSharpFunc{Fake.NGenHelper.NGenParams,Fake.NGenHelper.NGenParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs ngen.exe install on given assemblies.
</summary>
</member>
<member name="M:Fake.NGenHelper.NGen(Microsoft.FSharp.Core.FSharpFunc{Fake.NGenHelper.NGenParams,Fake.NGenHelper.NGenParams},System.String)">
<summary>
 Runs ngen.exe with the given command.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.NGenHelper.NGenDefaults">
<summary>
 NGen default parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NGenHelper">
<summary>
 This module contains helper function for the ngen.exe
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NUnitCommon.NUnitParams">
<summary>
 Parameter type for NUnit.
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.MultipleDomainModel">
<summary>
 A separate test domain is created for each assembly
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.SingleDomainModel">
<summary>
 A test domain is created - this is how NUnit worked prior to version 2.4
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.DefaultDomainModel">
<summary>
 No domain is created - the tests are run in the primary domain. This normally requires copying the NUnit assemblies into the same directory as your tests.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel">
<summary>
 The /domain option controls of the creation of AppDomains for running tests. See http://www.nunit.org/index.php?p=consoleCommandLine&amp;r=2.4.6
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NUnitCommon.NUnitProcessModel">
<summary>
 Process model for nunit to use, see http://www.nunit.org/index.php?p=projectEditor&amp;r=2.5
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitErrorLevel">
<summary>
 Option which allows to specify if a NUnit error should break the build.
</summary>
</member>
<member name="M:Fake.NUnitCommon.|OK|TestsFailed|FatalError|(System.Int32)">
<summary>
 NUnit console returns negative error codes for errors and sum of failed, ignored and exceptional tests otherwise. 
 Zero means that all tests passed.
</summary>
</member>
<member name="M:Fake.NUnitCommon.getWorkingDir(Fake.NUnitCommon.NUnitParams)">
<summary>
 Tries to detect the working directory as specified in the parameters or via TeamCity settings
 [omit]
</summary>
</member>
<member name="M:Fake.NUnitCommon.buildNUnitdArgs(Fake.NUnitCommon.NUnitParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitDefaults">
<summary>
 NUnit default parameters. FAKE tries to locate nunit-console.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.NUnitCommon">
<summary>
 Contains types and utility functions relaited to running [NUnit](http://www.nunit.org/) unit tests.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NUnitParallel.NUnitParallel(Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NUnit in parallel on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing NUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\Test.*.dll&quot;) 
           |&gt; NUnitParallel (fun p -&gt; { p with ErrorLevel = DontFailBuild })
     )
</summary>
</member>
<member name="T:Fake.NUnitParallel">
<summary>
 Contains tasks to run [NUnit](http://www.nunit.org/) unit tests in parallel.
</summary>
</member>
<member name="M:Fake.NUnitSequential.NUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NUnit on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing NUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\Test.*.dll&quot;) 
           |&gt; NUnit (fun p -&gt; { p with ErrorLevel = DontFailBuild })
     )
</summary>
</member>
<member name="T:Fake.NUnitSequential">
<summary>
 Contains tasks to run [NUnit](http://www.nunit.org/) unit tests.
</summary>
</member>
<member name="M:Fake.NUnitXml.AllSucceeded``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Returns whether all tests in the given test result have succeeded
</summary>
</member>
<member name="M:Fake.NUnitXml.GetTestAssemblies(System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NUnitXml.NUnitMerge.mergeXDocs``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Merges non-empty list of test result XDocuments into a single XElement
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NUnitXml.NUnitMerge">
<summary>
 Used by the NUnitParallel helper, can also be used to merge test results
 from multiple calls to the normal NUnit helper.
</summary>
</member>
<member name="T:Fake.NUnitXml">
<summary>
 Contains types and functions for working with [NUnit](http://www.nunit.org/) unit tests result xml.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ConfigFile">
<summary>
 NuGet configuration file. Default `None`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.NoCache">
<summary>
 Disable looking up packages from local machine cache. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Verbosity">
<summary>
 Display this amount of details in the output: normal, quiet, detailed. Default `normal`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.OutputDirectory">
<summary>
 Specifies the directory in which packages will be installed. Default  `./packages/`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ExcludeVersion">
<summary>
 If set, the destination directory will contain only the package name, not the version number. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Version">
<summary>
 The version of the package to install.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.NuGet.Install.NugetInstallParams">
<summary>
 Nuget install parameters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NuGet.Install.NugetInstallVerbosity">
<summary>
 Nuget install verbosity mode.
</summary>
</member>
<member name="M:Fake.NuGet.Install.NugetInstall(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGet.Install.NugetInstallParams,Fake.NuGet.Install.NugetInstallParams},System.String)">
<summary>
 Installs the given package.

 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
  - `packagesFile` - Path to the `*.sln`, `*.*proj` or `packages.config` file.
</summary>
</member>
<member name="M:Fake.NuGet.Install.buildArgs(Fake.NuGet.Install.NugetInstallParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGet.Install.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.NuGet.Install">
<summary>
 Contains tasks for installing NuGet packages using the [nuget.exe install command](http://docs.nuget.org/docs/reference/command-line-reference#Install_Command).
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.ConfigFile">
<summary>
 NuGet configuration file. Default `None`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Safe">
<summary>
 Looks for updates with the highest version available within the same major and minor version as the installed package. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.RepositoryPath">
<summary>
 Folder to store packages in. Default `./packages`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Ids">
<summary>
 Packages to update. Update all if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.NuGet.Update.NugetUpdateParams">
<summary>
 Nuget update parameters.
</summary>
</member>
<member name="M:Fake.NuGet.Update.NugetUpdate(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGet.Update.NugetUpdateParams,Fake.NuGet.Update.NugetUpdateParams},System.String)">
<summary>
 Update packages specified in the package file.

 Fails if packages are not installed; see [nuget bug](https://nuget.codeplex.com/workitem/3874).
 Fails if packages file has no corresponding VS project; see [nuget bug](https://nuget.codeplex.com/workitem/3875).
 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
  - `packagesFile` - Path to the `*.sln`, `*.*proj` or `packages.config` file.
</summary>
</member>
<member name="M:Fake.NuGet.Update.buildArgs(Fake.NuGet.Update.NugetUpdateParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.NuGet.Update">
<summary>
 Contains tasks for updating NuGet packages including assembly hint paths in the project files using the [nuget.exe update command](http://docs.nuget.org/docs/reference/command-line-reference#Update_Command).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NuGetHelper.NuSpecPackage">
<summary>
 NuSpec metadata type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.NuGetHelper.NuGetParams">
<summary>
 Nuget parameter type
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.Nuspec">
<summary>
 Build a symbol package using the nuspec file
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.ProjectFile">
<summary>
 Build a symbol package using a project file, if provided
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.None">
<summary>
 Do not build symbol packages
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NuGetHelper.getDependencies(System.String)">
<summary>
 loads the dependences from specified packages.config file
</summary>
</member>
<member name="M:Fake.NuGetHelper.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.downloadPackage(System.String,Fake.NuGetHelper.NuSpecPackage)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getLatestPackage(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getFeedPackagesFromUrl(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getPackage(System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.extractFeedPackageFromXml(System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGetHelper.discoverRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.NuGetHelper.feedUrl">
<summary>
 Default NuGet feed
</summary>
</member>
<member name="M:Fake.NuGetHelper.GetMetaDataFromPackageFile(System.String)">
<summary>
 Returns the NuGet meta data from the given package file name.
 ## Parameters
 
  - `packageFileName` - The .nuspec package file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.getNuspecProperties(System.String)">
<summary>
 Parses nuspec metadata from a nuspec file.
 ## Parameters
 
  - `nuspec` - The .nuspec file content.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGet(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams},System.String)">
<summary>
 Creates a new NuGet package.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `nuspecFile` - The .nuspec file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetPublish(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams})">
<summary>
 Publishes a NuGet package to the nuget server.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetPack(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams},System.String)">
<summary>
 Creates a new NuGet package based on the given .nuspec file.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `nuspecFile` - The .nuspec file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.publishSymbols(Fake.NuGetHelper.NuGetParams)">
<summary>
 push package to symbol server (and try again if something fails)
</summary>
</member>
<member name="M:Fake.NuGetHelper.publish(Fake.NuGetHelper.NuGetParams)">
<summary>
 push package (and try again if something fails)
</summary>
</member>
<member name="M:Fake.NuGetHelper.pack(Fake.NuGetHelper.NuGetParams,System.String)">
<summary>
 create package (including symbols package if enabled)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NuGetHelper.GetPackageVersion(System.String,System.String)">
<summary>
 Gets the version no. for a given package in the deployments folder
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.NuGetHelper.RequireExactly(System.String)">
<summary>
 Creates a string which tells NuGet that you require exactly this package version.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetDefaults">
<summary>
 NuGet default parameters  
</summary>
</member>
<member name="T:Fake.NuGetHelper">
<summary>
 Contains helper functions and task which allow to inspect, create and publish [NuGet](https://www.nuget.org/) packages.
 There is also a tutorial about [nuget package creating](../create-nuget-package.html) available.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.OctoParams">
<summary>
 Complete Octo.exe CLI params
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.OctoCommand">
<summary>
 Option type for selecting one command
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.DeleteReleaseOptions">
<summary>
 Options for deleting a range of releases in a project
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.DeployReleaseOptions">
<summary>
 Options for deploying a release to an environment
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.CreateReleaseOptions">
<summary>
 Options for creating a new release
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.OctoTools.OctoServerOptions">
<summary>
 Octo.exe server options
</summary>
</member>
<member name="M:Fake.OctoTools.Octo(Microsoft.FSharp.Core.FSharpFunc{Fake.OctoTools.OctoParams,Fake.OctoTools.OctoParams})">
<summary>
 This task calls the Octo.exe CLI.
 See [Octopus-Tools](https://github.com/OctopusDeploy/Octopus-Tools) for more details.
 ## Parameters

  - `setParams` - Function used to overwrite the OctoTools default parameters.
</summary>
</member>
<member name="M:Fake.OctoTools.commandLine(Fake.OctoTools.OctoCommand)">
<summary>
 Maps a command to string input for the octopus tools cli.
</summary>
</member>
<member name="M:Fake.OctoTools.serverCommandLine(Fake.OctoTools.OctoServerOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.deleteCommandLine(Fake.OctoTools.DeleteReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.deployCommandLine(Fake.OctoTools.DeployReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.releaseCommandLine(Fake.OctoTools.CreateReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.flag(System.String,System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.stringListParam``1(System.String,System.Collections.Generic.IEnumerable{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.optionalObjParam``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.optionalStringParam(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.OctoTools.octoParams">
<summary>
 Default parameters to call octo.exe.
</summary>
</member>
<member name="P:Fake.OctoTools.deleteOptions">
<summary>
 Default options for &apos;DeleteReleases&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.deployOptions">
<summary>
 Default options for &apos;DeployRelease&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.releaseOptions">
<summary>
 Default options for &apos;CreateRelease&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.serverOptions">
<summary>
 Default server options.
</summary>
</member>
<member name="T:Fake.OctoTools">
<summary>
 Contains tasks which can be used for automated deployment via [Octopus Deploy](http://octopusdeploy.com/).
 There is also a tutorial about the [Octopus deployment helper](../octopusdeploy.html) available.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.WorkingDir">
<summary>
 The directory where the OpenCover process will be started.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.TimeOut">
<summary>
 The timeout for the OpenCover process.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Filter">
<summary>
 A list of filters to apply to selectively include or exclude assemblies and classes from coverage results.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Register">
<summary>
 Use this to register and de-register the code coverage profiler.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Output">
<summary>
 The location and name of the output xml file. 
 If no value is supplied then the current directory 
 will be used and the output filename will be results.xml.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.TestRunnerExePath">
<summary>
 (Required) Path to the NUnit/XUnit console runner
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.ExePath">
<summary>
 (Required) Path to the OpenCover console application
</summary>
</member>
<member name="T:Fake.OpenCoverHelper.OpenCoverParams">
<summary>
 OpenCover parameters, for more details see: https://github.com/OpenCover/opencover/wiki/Usage#console-application-usage.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.OpenCoverHelper.OpenCover(Microsoft.FSharp.Core.FSharpFunc{Fake.OpenCoverHelper.OpenCoverParams,Fake.OpenCoverHelper.OpenCoverParams},System.String)">
<summary>
 Runs OpenCover on a group of assemblies.
 ## Parameters

  - `setParams` - Function used to overwrite the default OpenCover parameters.
  - `targetArgs` - Test runner arguments.

 ## Sample

      OpenCover (fun p -&gt; { p with TestRunnerExePath = &quot;./Tools/NUnit/nunit-console.exe&quot; }) 
         &quot;project-file.nunit /config:Release /noshadow /xml:artifacts/nunit.xml /framework:net-4.0&quot;
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverDefaults">
<summary>
 OpenCover default parameters
</summary>
</member>
<member name="T:Fake.OpenCoverHelper">
<summary>
 Contains a task which can be used to run [OpenCover](https://github.com/sawilde/opencover) on .NET assemblies.
</summary>
</member>
<member name="M:Fake.PermissionsHelper.requiresAdmin``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Checks that the current user has administrator permissions - otherwise it throws an exception.
 ## Parameters
  - `f` - This Function will be excuted if the use has the right permissions.

 ## Sample

     Target &quot;Install&quot; (fun _ -&gt; 
          requiresAdmin (fun _ -&gt; installMSI())
      )
</summary>
</member>
<member name="M:Fake.PermissionsHelper.isAdmin(System.Security.Principal.WindowsIdentity)">
<summary>
 Returns whether the given user has administrator permissions.
 ## Parameters
  - `identity` - The windows identity of the user in question.
</summary>
</member>
<member name="T:Fake.PermissionsHelper">
<summary>
 Contains functions which allow to deal with permissions.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.ProcessHelper.Shell.Exec(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Runs the given process, waits for it&apos;s completion and returns the exit code.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments (optional).
  - `directory` - The working directory (optional).
</summary>
</member>
<member name="M:Fake.ProcessHelper.Shell.AsyncExec(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Runs the given process asynchronously.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments (optional).
  - `directory` - The working directory (optional).
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.ProcessHelper.Shell">
<summary>
 Allows to exec shell operations synchronously and asynchronously.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.Args">
<summary>
 Command-line argument pairs. The value will be quoted if it contains
 a string, and the result will be appended to the CommandLine property.
 If the key ends in a letter or number, a space will be inserted between
 the key and the value.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.CommandLine">
<summary>
 Command-line parameters in a string.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.WorkingDirectory">
<summary>
 The working directory for the program. Defaults to &quot;&quot;.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.Program">
<summary>
 The path to the executable, without arguments. 
</summary>
</member>
<member name="T:Fake.ProcessHelper.ExecParams">
<summary>
 Parameter type for process execution.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ProcessHelper.ProcessResult">
<summary>
 A process result including error code, message log and errors.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ProcessHelper.ConsoleMessage">
<summary>
 A record type which captures console messages
</summary>
</member>
<member name="M:Fake.ProcessHelper.shellExec(Fake.ProcessHelper.ExecParams)">
<summary>
 Execute an external program and return the exit code.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.ensureProcessesHaveStopped(System.String,System.TimeSpan)">
<summary>
 Waits until the processes with the given name have stopped or fails after given timeout.
 ## Parameters
  - `name` - The name of the processes in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killAllCreatedProcesses">
<summary>
 Kills all processes that are created by the FAKE build script unless &quot;donotkill&quot; flag was set.
</summary>
</member>
<member name="P:Fake.ProcessHelper.killCreatedProcesses">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.killMSBuild">
<summary>
 Kills the MSBuild process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killFSI">
<summary>
 Kills the F# Interactive (FSI) process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killProcess(System.String)">
<summary>
 Kills all processes with the given name
</summary>
</member>
<member name="M:Fake.ProcessHelper.getProcessesByName(System.String)">
<summary>
 Returns all processes with the given name
</summary>
</member>
<member name="M:Fake.ProcessHelper.killProcessById(System.Int32)">
<summary>
 Kills all processes with the given id
</summary>
</member>
<member name="M:Fake.ProcessHelper.kill(System.Diagnostics.Process)">
<summary>
 Kills the given process
</summary>
</member>
<member name="M:Fake.ProcessHelper.asyncShellExec(Fake.ProcessHelper.ExecParams)">
<summary>
 Execute an external program asynchronously and return the exit code,
 logging output and error messages to FAKE output. You can compose the result
 with Async.Parallel to run multiple external programs at once, but be
 sure that none of them depend on the output of another.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ProcessHelper.defaultParams">
<summary>
 Default parameters for process execution.
</summary>
</member>
<member name="M:Fake.ProcessHelper.findPath(System.String,System.String,System.String)">
<summary>
 Tries to find the tool via AppSettings. If no path has the right tool we are trying the PATH system variable.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindPath(System.String,System.String,System.String)">
<summary>
 Tries to find the tool via AppSettings. If no path has the right tool we are trying the PATH system variable.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.appSettings(System.String,System.String)">
<summary>
 Returns the AppSettings for the key - Splitted on ;
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFileOnPath(System.String)">
<summary>
 Searches the current directory and the directories within the PATH
 environment variable for the given file. If successful returns the full
 path to the file.
 ## Parameters
  - `exe` - The executable file to locate
</summary>
</member>
<member name="M:Fake.ProcessHelper.findFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for the given file, failing if not found.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for all occurrences of the given file name
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.parametersToString(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,System.String}}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.boolParam``2(``0,System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.optionParam``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.multipleStringParams``1(``0)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.stringParam``1(``0,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.UseDefaults``1">
<summary>
 Use default Parameters
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.toParam(System.String)">
<summary>
 Adds quotes and a blank around the string´.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.quoteIfNeeded(System.String)">
<summary>
 Adds quotes around the string if needed
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.quote(System.String)">
<summary>
 Adds quotes around the string
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartRemoteService(System.String,System.String)">
<summary>
 Starts a remote windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartService(System.String)">
<summary>
 Starts a local windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StopRemoteService(System.String,System.String)">
<summary>
 Stops a remote windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StopService(System.String)">
<summary>
 Stops a local windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.RunService(System.String,System.String)">
<summary>
 Sends a command to a local windows service.
</summary>
</member>
<member name="M:Fake.ProcessHelper.RunRemoteService(System.String,System.String,System.String)">
<summary>
 Sends a command to a remote windows service.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Starts the given process and forgets about it.
</summary>
</member>
<member name="M:Fake.ProcessHelper.directExec(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process, waits for its completion and returns if it succeeded.
</summary>
</member>
<member name="M:Fake.ProcessHelper.fireAndForget(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Starts the given process and returns immediatly.
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns true if the exit code was 0.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.setEnvironmentVariables(System.Diagnostics.ProcessStartInfo,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Sets the environment Settings for the given startInfo.
 Existing values will be overriden.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessElevated(System.String,System.String,System.TimeSpan)">
<summary>
 Runs the given process in an elevated context and returns the exit code.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 ## Sample

     let result = ExecProcess (fun info -&gt;  
                       info.FileName &lt;- &quot;c:/MyProc.exe&quot;
                       info.WorkingDirectory &lt;- &quot;c:/workingDirectory&quot;
                       info.Arguments &lt;- &quot;-v&quot;) (TimeSpan.FromMinutes 5.0)
     
     if result &lt;&gt; 0 then failwithf &quot;MyProc.exe returned with a non-zero exit code&quot;
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess3(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns if the exit code was 0.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcessAndReturnExitCode(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess2(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan,System.Boolean)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
  - `silent` - If this flag is set then the process output is redicted to the trace.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessRedirected(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the process result.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessAndReturnMessages(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the process result.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessWithLambdas(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan,System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
  - `silent` - If this flag is set then the process output is redirected to the given output functions `errorF` and `messageF`.
  - `errorF` - A function which will be called with the error log.
  - `messageF` - A function which will be called with the message log.
</summary>
</member>
<member name="P:Fake.ProcessHelper.enableProcessTracing">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.ProcessHelper.redirectOutputToTrace">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.start(System.Diagnostics.Process)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.ProcessHelper.startedProcesses">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.ProcessHelper">
<summary>
 Contains functions which can be used to start other tools.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.ErrorLevel">
<summary>
 Option which allows to specify if a test runner error should break the build.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="T:Fake.ProcessTestRunner.ProcessTestRunnerParams">
<summary>
 The ProcessTestRunner parameter type.
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.RunConsoleTests(Microsoft.FSharp.Core.FSharpFunc{Fake.ProcessTestRunner.ProcessTestRunnerParams,Fake.ProcessTestRunner.ProcessTestRunnerParams},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Runs the given processes and returns the process results.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default parameter value.
  - `processes` - Sequence of one or more filenames and arguments to run.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         [&quot;process1.exe&quot;,&quot;argument1&quot;
          &quot;process2.exe&quot;,&quot;argument2&quot;]
           |&gt; RunConsoleTests (fun p -&gt; {p with TimeOut = TimeSpan.FromMinutes 1. })
     )
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.runConsoleTests(Fake.ProcessTestRunner.ProcessTestRunnerParams,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Runs the given processes and returns the process result messages.
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.RunConsoleTest(Fake.ProcessTestRunner.ProcessTestRunnerParams,System.String,System.String)">
<summary>
 Runs the given process and returns the process result.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerDefaults">
<summary>
 The ProcessTestRunner defeaults.
</summary>
</member>
<member name="T:Fake.ProcessTestRunner">
<summary>
 Allows to execute processes as unit tests.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.REST.PostMethod">
<summary>
 Option type for the HTTP verb
</summary>
</member>
<member name="M:Fake.REST.ExecutePost(System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `url` - The URL to perform the POST operation.
  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `data` - The data to post.
</summary>
</member>
<member name="M:Fake.REST.ExecutePostCommand(Microsoft.FSharp.Core.FSharpFunc{System.Net.WebHeaderCollection,Microsoft.FSharp.Core.Unit},System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.    
 This function will automatically include a &quot;source&quot; parameter if the &quot;Source&quot; property is set.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `headerF` - A function which allows to manipulate the HTTP headers.
  - `url` - The URL to perform the POST operation.
  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `data` - The data to post.
</summary>
</member>
<member name="M:Fake.REST.ExecuteGetCommand(System.String,System.String,System.String)">
<summary>
 Executes an HTTP GET command and retrives the information.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `url` - The URL to perform the GET operation.
</summary>
</member>
<member name="T:Fake.REST">
<summary>
 Contains functions to execute typical HTTP/REST calls.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.RegAsmHelper.RegAsmParams">
<summary>
 RegAsm parameter type
</summary>
</member>
<member name="M:Fake.RegAsmHelper.RegAsm(Microsoft.FSharp.Core.FSharpFunc{Fake.RegAsmHelper.RegAsmParams,Fake.RegAsmHelper.RegAsmParams},System.String)">
<summary>
 Runs regasm on the given lib
 ## Parameters
 
  - `setParams` - Function used to manipulate the default RegAsm parameters.
  - `lib` - The assembly file name.
</summary>
</member>
<member name="P:Fake.RegAsmHelper.RegAsmDefaults">
<summary>
 RegAsm default params
</summary>
</member>
<member name="T:Fake.RegAsmHelper">
<summary>
 Contains a task which can be used to run regasm .NET assembly
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.RegistryHelper.RegistryBaseKey">
<summary>
 Registry base keys.
</summary>
</member>
<member name="M:Fake.RegistryHelper.deleteRegistryValue(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Deletes the registry value from its key
</summary>
</member>
<member name="M:Fake.RegistryHelper.setRegistryValue``1(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String,``0)">
<summary>
 Sets a registry value
</summary>
</member>
<member name="M:Fake.RegistryHelper.createRegistrySubKey(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 create a registry subKey
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryValue64(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Gets a registy value as string
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryValue(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Gets a registy value as string
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryKey(Fake.RegistryHelper.RegistryBaseKey,System.String,System.Boolean)">
<summary>
 Gets a registy key and falls back to 32 bit if the 64bit key is not there
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryKey64(Fake.RegistryHelper.RegistryBaseKey,System.String,System.Boolean)">
<summary>
 Gets a 64-bit registy key
</summary>
</member>
<member name="M:Fake.RegistryHelper.get32BitKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey for a 32bit System
 [omit]
</summary>
</member>
<member name="M:Fake.RegistryHelper.get64BitKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey for a 64bit System
 [omit]
</summary>
</member>
<member name="M:Fake.RegistryHelper.getKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey
 [omit]
</summary>
</member>
<member name="T:Fake.RegistryHelper">
<summary>
 Contains functions which allow to read and write information from/to the registry.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.SemVer">
<summary>
 Semantic version
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.NugetVersion">
<summary>
 The nuget package version.
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.AssemblyVersion">
<summary>
 The parsed version.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ReleaseNotesHelper.ReleaseNotes">
<summary>
 Contains the parsed information of the release notes text file.
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.LoadReleaseNotes(System.String)">
<summary>
 Parses a Release Notes text file and returns the lastest release notes.

 ## Parameters
  - `fileName` - Release notes text file name
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parses a Release Notes text and returns the lastest release notes.

 ## Parameters
  - `data` - Release notes text
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseAllReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parses a Release Notes text and returns all release notes.

 ## Parameters
  - `data` - Release notes text
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseAllComplexReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parse &quot;complex&quot; release notes text sequence
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseSimpleReleaseNotes(System.String)">
<summary>
 Parse simple release notes sequence
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.ReleaseNotesHelper">
<summary>
 Contains helpers which allow to parse Release Notes text files. Either &quot;simple&quot; or &quot;complex&quot; format is accepted.

 ## Formats

 ### Simple format

     * 1.1.10 - Support for heterogeneous XML attributes. Make CsvFile re-entrant.
     * 1.1.9 - Infer booleans for ints that only manifest 0 and 1.

 ### Complex format

     ### New in 1.1.10 (Released 2013/09/12)
     * Support for heterogeneous XML attributes.
     * Make CsvFile re-entrant. 
     * Support for compressed HTTP responses. 
     * Fix JSON conversion of 0 and 1 to booleans.

     ### New in 1.1.9 (Released 2013/07/21)
     * Infer booleans for ints that only manifest 0 and 1.    
     * Support for partially overriding the Schema in CsvProvider.
     * PreferOptionals and SafeMode parameters for CsvProvider.

 ## Sample

     let release =
         ReadFile &quot;RELEASE_NOTES.md&quot;
         |&gt; ReleaseNotesHelper.parseReleaseNotes


     Target &quot;AssemblyInfo&quot; (fun _ -&gt;
         CreateFSharpAssemblyInfo &quot;src/Common/AssemblyInfo.fs&quot;
           [ Attribute.Title project
             Attribute.Product project
             Attribute.Description summary
             Attribute.Version release.AssemblyVersion
             Attribute.FileVersion release.AssemblyVersion]
     )
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.TimeOut">
<summary>
 The timeout for the ReportGenerator process.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.WorkingDir">
<summary>
 The directory where the ReportGenerator process will be started.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.LogVerbosity">
<summary>
 The verbosity level of the log messages.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.Filters">
<summary>
 Optional list of assemblies that should be included or excluded
 in the report. Exclusion filters take precedence over inclusion 
 filters. Wildcards are allowed.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.SourceDirs">
<summary>
 Optional directories which contain the corresponding source code.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.ReportTypes">
<summary>
 The output formats and scope.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.TargetDir">
<summary>
 (Required) The directory where the generated report should be saved.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.ExePath">
<summary>
 (Required) Path to the ReportGenerator exe file.
</summary>
</member>
<member name="T:Fake.ReportGeneratorHelper.ReportGeneratorParams">
<summary>
 ReportGenerator parameters, for more details see: https://reportgenerator.codeplex.com.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.ReportGeneratorHelper.ReportGenerator(Microsoft.FSharp.Core.FSharpFunc{Fake.ReportGeneratorHelper.ReportGeneratorParams,Fake.ReportGeneratorHelper.ReportGeneratorParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Runs ReportGenerator on one or more coverage reports.
 ## Parameters

  - `setParams` - Function used to overwrite the default ReportGenerator parameters.
  - `reports` - Coverage reports.

 ## Sample

      ReportGenerator (fun p -&gt; { p with TargetDir = &quot;c:/reports/&quot; }) [ &quot;c:/opencover.xml&quot; ]
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorDefaultParams">
<summary>
 ReportGenerator default parameters
</summary>
</member>
<member name="T:Fake.ReportGeneratorHelper">
<summary>
 Contains a task which can be used to run [ReportGenerator](https://reportgenerator.codeplex.com),
 which converts XML reports generated by PartCover, OpenCover or NCover into a readable report in various formats.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.RestorePackageHelper.RestoreSinglePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.RestorePackageHelper.RestoreSinglePackageParams">
<summary>
 RestorePackages parameter path for single packages
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.RestorePackageHelper.RestorePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.RestorePackageHelper.RestorePackageParams">
<summary>
 RestorePackages parameter path
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackages">
<summary>
 Restores all packages from NuGet to the default directories by scanning for packages.config files in any subdirectory.
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackage(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestorePackageParams,Fake.RestorePackageHelper.RestorePackageParams},System.String)">
<summary>
 Restores the packages in the given packages.config file from NuGet.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `packageFile` - The packages.config file name.

 ## Sample

     Target &quot;RestorePackages&quot; (fun _ -&gt; 
          &quot;./scr/ProjectA/packages.config&quot;
          |&gt; RestorePackage (fun p -&gt;
              { p with
                  Sources = &quot;http:://myNugetSources.com&quot; :: p.Sources
                  OutputPath = outputDir
                  Retries = 4 })
      )
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackageId(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestoreSinglePackageParams,Fake.RestorePackageHelper.RestoreSinglePackageParams},System.String)">
<summary>
 Restores the given package from NuGet
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.buildNuGetArgs(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestoreSinglePackageParams,Fake.RestorePackageHelper.RestoreSinglePackageParams},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.runNuGetTrial(System.Int32,System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.runNuGet(System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestoreSinglePackageDefaults">
<summary>
 RestoreSinglePackageParams defaults parameters  
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestorePackageDefaults">
<summary>
 RestorePackage defaults parameters
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.findNuget(System.String)">
<summary>
 Looks for a tool in all subfolders - returns the tool file name.
</summary>
</member>
<member name="T:Fake.RestorePackageHelper">
<summary>
 Contains tasks which allow to restore NuGet packages from a NuGet package feed like [nuget.org](http://www.nuget.org).
 There is also a tutorial about [nuget package restore](../nuget.html) available.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SchemaName">
<summary>
  The schema where RH stores it&apos;s tables
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.TimeOut">
<summary>
 A timeout for the runner.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ToolPath">
<summary>
 FileName of the Roundhouse runner.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WarnOnOneTimeScriptChanges">
<summary>
 Instructs RH to execute changed one time scripts (DDL/DML in Up folder) that have previously been run against the database instead of failing. A warning is logged for each one time scripts that is rerun.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.PermissionsFolderName">
<summary>
 The name of the folder where you keep your permissions scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunAfterOtherAnyTimeScriptsFolderName">
<summary>
 The name of the folder where you keep scripts that will be run after all of the other any time scripts complete.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.IndexesFolderName">
<summary>
 The name of the folder where you keep your indexes.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SprocsFolderName">
<summary>
 The name of the folder where you keep your stored procedures.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ViewsFolderName">
<summary>
 The name of the folder where you keep your views.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.FunctionsFolderName">
<summary>
 The name of the folder where you keep your functions.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunFirstAfterUpdateFolderName">
<summary>
 The name of the folder where you keep any functions, views, or sprocs that are order dependent. If you have a function that depends on a view, you definitely need the view in this folder.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.UpFolderName">
<summary>
 The name of the folder where you keep your update scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunBeforeUpFolderName">
<summary>
 The name of the folder where you keep scripts that you want to run before your update scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunAfterCreateDatabaseFolderName">
<summary>
 The name of the folder where you will keep scripts that ONLY run after a database is created.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.AlterDatabaseFolderName">
<summary>
 The name of the folder where you keep your alter database scripts. Read up on token replacement. You will want to use {{DatabaseName}} here instead of specifying a database name.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Silent">
<summary>
 Tells RH not to ask for any input when it runs.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Restore">
<summary>
 This instructs RH to do a restore (with the restorefrompath parameter) of a database before running migration scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WithTransaction">
<summary>
 This instructs RH to run inside of a transaction.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Simple">
<summary>
 This instructs RH to set the database recovery mode to simple recovery. Only works with SqlServer.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Drop">
<summary>
 This instructs RH to remove a database and not run migration scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RestoreFilePath">
<summary>
 File path of back when Restore is set to true
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CustomCreateScript">
<summary>
 This instructs RH to use this script for creating a database instead of the default based on the SQLType.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Environment">
<summary>
 This allows RH to be environment aware and only run scripts that are in a particular environment based on the namingof the script. LOCAL.something**.ENV.**sql would only be run in the LOCAL environment.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RepositoryPath">
<summary>
 Path to code repository to be able to correlate versions
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.VersionXPath">
<summary>
 Works in conjunction with an XML version file.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.VersionFile">
<summary>
 Path to the file to use for versioning. Either a .XML file, a .DLL or a .TXT file that a version can be resolved from.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.OutputPath">
<summary>
 Output path. Path to where migration artifacts are stored.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.DatabaseType">
<summary>
 Database Type (fully qualified class name implementing [roundhouse.sql.Database, roundhouse])
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CommandTimeoutAdmin">
<summary>
 This is the timeout when administration commands are run (except for restore, which has its own). 
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CommandTimeout">
<summary>
 This is the timeout when commands are run. This is not for admin commands or restore.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ConnectionStringAdmin">
<summary>
 This is used for connecting to master when you may have a different uid and password than normal.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ConnectionString">
<summary>
 As an alternative to ServerName and Database - You can provide an entire connection string instead.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ServerDatabase">
<summary>
 The server and instance you would like to run on. (local) and (local)\SQL2008 are both valid values. 
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SqlFilesDirectory">
<summary>
 The directory where your SQL scripts are.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.DatabaseName">
<summary>
 The database you want to create/migrate.
</summary>
</member>
<member name="T:Fake.RoundhouseHelper.RoundhouseParams">
<summary>
 Parameter type to configure the RoundhousE runner
</summary>
</member>
<member name="M:Fake.RoundhouseHelper.Roundhouse(Microsoft.FSharp.Core.FSharpFunc{Fake.RoundhouseHelper.RoundhouseParams,Fake.RoundhouseHelper.RoundhouseParams})">
<summary>
 This task to can be used to run [RoundhousE](http://projectroundhouse.org/) for database migrations.
 ## Parameters

  - `setParams` - Function used to overwrite the Roundhouse default parameters.

 ## Sample

     Roundhouse (fun p -&gt; { p with 
        SqlFilesDirectory = &quot;.\database&quot;
        ServerDatabase = &quot;(local)&quot;
        DatabaseName = &quot;atxc&quot;
        WarnOnOneTimeScriptChanges = true })

</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseDefaults">
<summary>
 Roundhouse default parameters - tries to locate rh.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.RoundhouseHelper">
<summary>
 Contains tasks to run [RoundhousE](http://projectroundhouse.org/) database migrations.
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPParams.PrivateKeyPath">
<summary>
 Path of the private key file (optional)
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPParams.ToolPath">
<summary>
 Path of the scp.exe 
</summary>
</member>
<member name="T:Fake.SCPHelper.SCPParams">
<summary>
 The SCP parameter type.
</summary>
</member>
<member name="M:Fake.SCPHelper.SCP(Microsoft.FSharp.Core.FSharpFunc{Fake.SCPHelper.SCPParams,Fake.SCPHelper.SCPParams},System.String,System.String)">
<summary>
 Performs a SCP copy from the given source directory to the target path.
 ## Parameters

  - `setParams` - Function used to manipulate the default SCPParams value.
  - `source` - The source path. Can be something like user@host:directory/SourceFile or a local path.
  - `target` - The target path. Can be something like user@host:directory/TargetFile or a local path.

 ## Sample

     SCP (fun p -&gt; { p with ToolPath = &quot;tools/scp.exe&quot; }) source target
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPDefaults">
<summary>
 The SCP default parameters
</summary>
</member>
<member name="T:Fake.SCPHelper">
<summary>
 Conatins a task which allows to perform file copies using [SCP](http://en.wikipedia.org/wiki/Secure_copy), which is based on the Secure Shell (SSH) protocol.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Build">
<summary>
 The optional build no.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.PreRelease">
<summary>
 The optional PreRelease version
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Patch">
<summary>
 PATCH version when you make backwards-compatible bug fixes.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Minor">
<summary>
 MINOR version when you add functionality in a backwards-compatible manner.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Major">
<summary>
 MAJOR version when you make incompatible API changes.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.SemVerHelper.SemVerInfo">
<summary>
 Contains the version information.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.SemVerHelper.parse(System.String)">
<summary>
 Parses the given version string into a SemVerInfo which can be printed using ToString() or compared
 according to the rules described in the [SemVer docs](http://semver.org/).
 ## Sample

     parse &quot;1.0.0-rc.1&quot;     &lt; parse &quot;1.0.0&quot;          // true
     parse &quot;1.2.3-alpha&quot;    &gt; parse &quot;1.2.2&quot;          // true
     parse &quot;1.2.3-alpha2&quot;   &gt; parse &quot;1.2.3-alpha&quot;    // true
     parse &quot;1.2.3-alpha002&quot; &gt; parse &quot;1.2.3-alpha1&quot;   // true
     parse &quot;1.5.0-beta.2&quot;   &gt; parse &quot;1.5.0-rc.1&quot;     // false
</summary>
</member>
<member name="T:Fake.SemVerHelper">
<summary>
 Contains helpers which allow to deal with [Semantic Versioning](http://semver.org/) (SemVer).
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureServiceHasStopped(System.String,System.TimeSpan)">
<summary>
 Waits until the local service with the given name has been stopped or fails after given timeout
 ## Parameters
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureRemoteServiceHasStopped(System.String,System.String,System.TimeSpan)">
<summary>
 Waits until the remote service with the given name has been stopped or fails after given timeout
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureServiceHasStarted(System.String,System.TimeSpan)">
<summary>
 Waits until the local service with the given name has been started or fails after given timeout
 ## Parameters
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureRemoteServiceHasStarted(System.String,System.String,System.TimeSpan)">
<summary>
 Waits until the remote service with the given name has been started or fails after given timeout
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.stopService(System.String)">
<summary>
 Stops all local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.stopRemoteService(System.String,System.String)">
<summary>
 Stops all services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.startService(System.String)">
<summary>
 Starts all local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.startRemoteService(System.String,System.String)">
<summary>
 Starts all remote services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getServiceStatus(System.String)">
<summary>
 Returns status of the local service with given name or fails when service is not found.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteServiceStatus(System.String,System.String)">
<summary>
 Returns status of the remote service with given name or fails when service is not found.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.checkServiceExists(System.String)">
<summary>
 Returns whether a local service with the given name exists.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.checkRemoteServiceExists(System.String,System.String)">
<summary>
 Returns whether a remote service with the given name exists.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getService(System.String)">
<summary>
 Returns the first local service with given name or None.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteService(System.String,System.String)">
<summary>
 Returns the first remote service with given name or None.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getServices(System.String)">
<summary>
 Returns sequence of local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteServices(System.String,System.String)">
<summary>
 Returns sequence of remote services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.isService(System.String,System.ServiceProcess.ServiceController)">
<summary>
 Returns whether the given service has the given name as display or service name.
 ## Parameters
  - `name` - The name to check for.
  - `service` - The service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.friendlyName(System.String,System.String)">
<summary>
 Get friendly service name for displaying in logs
</summary>
</member>
<member name="P:Fake.ServiceControllerHelpers.localhost">
<summary>
 Host value used for querying local services.
</summary>
</member>
<member name="T:Fake.ServiceControllerHelpers">
<summary>
 Contains tasks which allow to control NT services.
</summary>
</member>
<member name="M:Fake.SignHelper.SignTool(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Signs all files in filesToSign with the certification file certFile, 
 protected with the password in the file passFile. 
 The signtool will be search in the toolPath.
</summary>
</member>
<member name="T:Fake.SignHelper">
<summary>
 Contains a task which allows to sign assemblies.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.SpecFlowHelper.SpecFlowParams">
<summary>
 SpecFlow execution parameter type.
</summary>
</member>
<member name="M:Fake.SpecFlowHelper.SpecFlow(Microsoft.FSharp.Core.FSharpFunc{Fake.SpecFlowHelper.SpecFlowParams,Fake.SpecFlowHelper.SpecFlowParams})">
<summary>
 ## Parameters

  - `setParams` - Function used to manipulate the default SpecFlow parameter value.
</summary>
</member>
<member name="P:Fake.SpecFlowHelper.SpecFlowDefaults">
<summary>
 SpecFlow default execution parameters.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.SpecFlowHelper">
<summary>
 Contains a task which allows to run [SpecFlow](http://www.specflow.org/) tests.
</summary>
</member>
<member name="M:Fake.StringHelper.DecodeBase64Utf8String(System.String)">
<summary>
 Decodes a Base64-encoded UTF-8-encoded string
</summary>
</member>
<member name="M:Fake.StringHelper.op_GreaterMultiplyMultiply(System.String,System.String)">
<summary>
 Determines if a text matches a given regex pattern.
</summary>
</member>
<member name="M:Fake.StringHelper.op_GreaterEqualsGreater(System.String,System.String,System.String)">
<summary>
 Find a regex pattern in a text and replaces it with the given replacement.
</summary>
</member>
<member name="M:Fake.StringHelper.toRelativePath(System.String)">
<summary>
 Replaces the absolute path to a relative path.
</summary>
</member>
<member name="M:Fake.StringHelper.ProduceRelativePath(System.String,System.String)">
 <summary>Produces relative path when possible to go from baseLocation to targetLocation.</summary>
 <param name="baseLocation">The root folder</param>
 <param name="targetLocation">The target folder</param>
 <returns>The relative path relative to baseLocation</returns>
 <exception cref="ArgumentNullException">base or target locations are null or empty</exception>
</member>
<member name="P:Fake.StringHelper.relativePaths">
<summary>
 A cache of relative path names.
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.EncapsulateApostrophe(System.String)">
<summary>
 Encapsulates the Apostrophe
</summary>
</member>
<member name="M:Fake.StringHelper.RemoveLineBreaks(System.String)">
<summary>
 Removes linebreaks from the given string
</summary>
</member>
<member name="M:Fake.StringHelper.ConvertFileToWindowsLineBreaks(System.String)">
<summary>
 Reads a file line by line and replaces all line breaks to windows line breaks
   - uses a temp file to store the contents in order to prevent OutOfMemory exceptions
</summary>
</member>
<member name="M:Fake.StringHelper.ConvertTextToWindowsLineBreaks(System.String)">
<summary>
 Converts all line breaks in a text to windows line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.MacLineBreaks">
<summary>
 Represents Mac line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.WindowsLineBreaks">
<summary>
 Represents Windows line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.LinuxLineBreaks">
<summary>
 Represents Linux line breaks
</summary>
</member>
<member name="M:Fake.StringHelper.ReplaceInFile(Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},System.String)">
<summary>
 Replaces the text in the given file
</summary>
</member>
<member name="M:Fake.StringHelper.op_LessMultiply(System.String,System.String)">
<summary>
 Checks whether the given text starts with the given prefix
</summary>
</member>
<member name="M:Fake.StringHelper.shortenCurrentDirectory(System.String)">
<summary>
 Replaces any occurence of the currentDirectory with .
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFileAsBytes(System.String)">
<summary>
 Reads a file as one array of bytes
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFileAsString(System.String)">
<summary>
 Reads a file as one text
</summary>
</member>
<member name="M:Fake.StringHelper.AppendToFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all lines to a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.WriteFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.StringHelper.ReplaceFile(System.String,System.String)">
<summary>
 Replaces the file with the given string
</summary>
</member>
<member name="M:Fake.StringHelper.WriteStringToFile(System.Boolean,System.String,System.String)">
<summary>
 Writes a string to a file
</summary>
</member>
<member name="M:Fake.StringHelper.WriteBytesToFile(System.String,System.Byte[])">
<summary>
 Writes a byte array to a file
</summary>
</member>
<member name="M:Fake.StringHelper.NormalizeVersion(System.String)">
<summary>
 Removes all trailing .0 from a version string
</summary>
</member>
<member name="M:Fake.StringHelper.WriteToFile(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.ReadLine(System.String)">
<summary>
 Reads the first line of a file. This can be helpful to read a password from file.
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFile(System.String)">
<summary>
 Reads a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.liftString(System.String)">
<summary>
 Lifts a string to an option
</summary>
</member>
<member name="M:Fake.StringHelper.trimEndChars(System.Char[],System.String)">
<summary>
 Trims the end of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimStartChars(System.Char[],System.String)">
<summary>
 Trims the start of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimChars(System.Char[],System.String)">
<summary>
 Trims the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trim(System.String)">
<summary>
 Trims the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimSpecialChars(System.String)">
<summary>
 Trims all special characters from a string.
</summary>
</member>
<member name="M:Fake.StringHelper.trimSeparator(System.String)">
<summary>
 Trims the given string with the DirectorySeparatorChar
</summary>
</member>
<member name="M:Fake.StringHelper.isLetterOrDigit(System.Char)">
<summary>
 Checks whether the given char is a standard char or digit.
</summary>
</member>
<member name="P:Fake.StringHelper.charsAndDigits">
<summary>
 Returns all standard chars and digits.
</summary>
</member>
<member name="M:Fake.StringHelper.toLower(System.String)">
<summary>
 Converts all characters in a string to lower case.
</summary>
</member>
<member name="M:Fake.StringHelper.isUmlaut(System.Char)">
<summary>
 Checks whether the given char is a german umlaut.
</summary>
</member>
<member name="M:Fake.StringHelper.regex_replace(System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.getRegEx(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.StringHelper.regexes">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.toText(System.Text.StringBuilder)">
<summary>
 Returns the text from the StringBuilder
</summary>
</member>
<member name="M:Fake.StringHelper.appendFileNamesIfNotNull(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder)">
<summary>
 Appends all notnull fileNames.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfNotNullOrEmpty(System.String,System.String)">
<summary>
 Appends a text if the value is not null or empty.
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNullOrEmpty(System.String)">
<summary>
 Appends a text if the value is not null or empty.
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNull``1(``0)">
<summary>
 Appends a text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendQuotedIfNotNull(System.Object,System.String,System.Text.StringBuilder)">
<summary>
 Appends a quoted text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfNotNull(System.Object,System.String)">
<summary>
 Appends a text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfFalse(System.Boolean)">
<summary>
 Appends a text if the predicate is false.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.StringHelper.appendIfTrue(System.Boolean,System.String,System.Text.StringBuilder)">
<summary>
 Appends a text if the predicate is true.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfSome``1(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.String},System.Text.StringBuilder)">
<summary>
 Appends string of function value if option has some value
</summary>
</member>
<member name="M:Fake.StringHelper.appendWithoutQuotes(System.String,System.Text.StringBuilder)">
<summary>
 Appends a text to a StringBuilder without surrounding quotes.
</summary>
</member>
<member name="M:Fake.StringHelper.append(System.String,System.Text.StringBuilder)">
<summary>
 Appends a text to a StringBuilder.
</summary>
</member>
<member name="M:Fake.StringHelper.replaceFirst(System.String,System.String,System.String)">
<summary>
 Replaces the first occurrence of the pattern with the given replacement.
</summary>
</member>
<member name="P:Fake.StringHelper.endsWithSlash">
<summary>
 Determines whether the last character of the given &lt;see cref=&quot;string&quot; /&gt;
 matches Path.DirectorySeparatorChar.         
</summary>
</member>
<member name="M:Fake.StringHelper.endsWith(System.String,System.String)">
<summary>
 Checks whether the given text ends with the given suffix
</summary>
</member>
<member name="M:Fake.StringHelper.startsWith(System.String,System.String)">
<summary>
 Checks whether the given text starts with the given prefix
</summary>
</member>
<member name="M:Fake.StringHelper.toLines(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings into a string separated with line ends
</summary>
</member>
<member name="M:Fake.StringHelper.splitStr(System.String,System.String)">
<summary>
 Splits the given string at the given string delimiter
</summary>
</member>
<member name="M:Fake.StringHelper.split(System.Char,System.String)">
<summary>
 Splits the given string at the given char delimiter
</summary>
</member>
<member name="M:Fake.StringHelper.trimSlash(System.String)">
<summary>
 Removes the slashes from the end of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.separated(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings to a string with delimiters
</summary>
</member>
<member name="M:Fake.StringHelper.replace(System.String,System.String,System.String)">
<summary>
 Replaces the given pattern in the given text with the replacement
</summary>
</member>
<member name="M:Fake.StringHelper.isNullOrWhiteSpace(System.String)">
<summary>
 Returns if the string is null or empty or completely whitespace
</summary>
</member>
<member name="M:Fake.StringHelper.isNotNullOrEmpty(System.String)">
<summary>
 Returns if the string is not null or empty
</summary>
</member>
<member name="M:Fake.StringHelper.isNullOrEmpty(System.String)">
<summary>
 Returns if the string is null or empty
</summary>
</member>
<member name="M:Fake.StringHelper.productName">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.StringHelper">
<summary>
 Contains basic functions for string manipulation.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.WorkingDir">
<summary>
 The directory where the Strong naming process will be started.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.TimeOut">
<summary>
 The timeout for the Strong naming process.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.ToolPath">
<summary>
 (Required) Path to the sn.exe
</summary>
</member>
<member name="T:Fake.StrongNamingHelper.StrongNameParams">
<summary>
 Strong naming parameters
</summary>
</member>
<member name="M:Fake.StrongNamingHelper.DisableVerification(System.String,System.String)">
<summary>
 Registers the given assembly for verification skipping.
</summary>
</member>
<member name="M:Fake.StrongNamingHelper.StrongName(Microsoft.FSharp.Core.FSharpFunc{Fake.StrongNamingHelper.StrongNameParams,Fake.StrongNamingHelper.StrongNameParams},System.String)">
<summary>
 Runs sn.exe with the given command.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameDefaults">
<summary>
 Strong naming default parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.StrongNamingHelper">
<summary>
 This module contains helper function for Microsoft&apos;s sn.exe
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TargetHelper.BuildError">
<summary>
 Represents build errors
</summary>
</member>
<member name="T:Fake.TargetHelper.Target">
<summary>
 A Target can be run during the build
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TargetHelper.TargetTemplate`1">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TargetHelper.TargetDescription">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.ActivateFinalTarget(System.String)">
<summary>
 Activates the FinalTarget.
</summary>
</member>
<member name="M:Fake.TargetHelper.FinalTarget(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a final target (not activated).
</summary>
</member>
<member name="M:Fake.TargetHelper.ActivateBuildFailureTarget(System.String)">
<summary>
 Activates the BuildFailureTarget.
</summary>
</member>
<member name="M:Fake.TargetHelper.BuildFailureTarget(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a BuildFailureTarget (not activated).
</summary>
</member>
<member name="M:Fake.TargetHelper.run(System.String)">
<summary>
 Runs a target and its dependencies.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.listTargets">
<summary>
 Prints all available targets.
</summary>
</member>
<member name="P:Fake.TargetHelper.isListMode">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.WriteTaskTimeSummary``1(``0)">
 <summary>Writes a build time report.</summary>
 <param name="total">The total runtime.</param>
</member>
<member name="M:Fake.TargetHelper.WriteErrors">
<summary>
 Writes a summary of errors reported during build.
</summary>
</member>
<member name="M:Fake.TargetHelper.PrintDependencyGraph(System.Boolean,System.String)">
 <summary>Writes a dependency graph.</summary>
 <param name="verbose">Whether to print verbose output or not.</param>
 <param name="target">The target for which the dependencies should be printed.</param>
</member>
<member name="M:Fake.TargetHelper.PrintTargets">
<summary>
 Prints all targets.
</summary>
</member>
<member name="M:Fake.TargetHelper.runBuildFailureTargets">
<summary>
 Runs all build failure targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.runFinalTargets">
<summary>
 Runs all activated final targets (in alphabetically order).
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.targetError(System.String,System.Exception)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.Target(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a Target.
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a TargetTemplate.
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplateWithDependecies``1(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a TargetTemplate with dependencies-
</summary>
</member>
<member name="M:Fake.TargetHelper.targetFromTemplate``1(Fake.TargetHelper.TargetTemplate{``0},System.String,``0)">
<summary>
 Creates a target from template.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.AllTargetsDependOn(System.String)">
<summary>
 Set a dependency for all registered targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetsDependOn(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Set a dependency for all given targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Backwards dependencies operator - y is dependend on x.
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependencies(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Adds the dependencies to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependency(System.String,System.String)">
<summary>
 Adds the dependency to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyAtEnd(System.String,System.String)">
<summary>
 Appends the dependency to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyAtFront(System.String,System.String)">
<summary>
 Adds the dependency to the front of the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.checkIfDependencyCanBeAdded(System.String,System.String)">
<summary>
 Checks whether the dependency can be added.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.DoNothing">
<summary>
 Do nothing - fun () -&gt; () - Can be used to define empty targets.
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyString``1(Fake.TargetHelper.TargetTemplate{``0})">
<summary>
 Returns the DependencyString for the given target.
</summary>
</member>
<member name="M:Fake.TargetHelper.getTarget(System.String)">
<summary>
 Gets a target with the given name from the target dictionary.
</summary>
</member>
<member name="M:Fake.TargetHelper.getAllTargetsNames">
<summary>
 Returns a list with all target names.
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargetTimes">
<summary>
 The executed target time.
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargets">
<summary>
 The executed targets.
</summary>
</member>
<member name="P:Fake.TargetHelper.BuildFailureTargets">
<summary>
 BuildFailureTargets - stores build failure targets and if they are activated.
</summary>
</member>
<member name="P:Fake.TargetHelper.FinalTargets">
<summary>
 Final Targets - stores final targets and if they are activated.
</summary>
</member>
<member name="P:Fake.TargetHelper.TargetDict">
<summary>
 TargetDictionary
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.Description(System.String)">
<summary>
 Sets the Description for the next target.
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.LastDescription">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.PrintStackTraceOnError">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TargetHelper">
<summary>
 Contains infrastructure code and helper functions for FAKE&apos;s target feature.
</summary>
</member>
<member name="M:Fake.TaskRunnerHelper.runWithRetries``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.Int32)">
<summary>
 Retries the given function until a retry limit is reached or the function succeeds without exception.
 ## Parameters

  - `f` - This function will be started.
  - `retries` - A retry limit.
</summary>
</member>
<member name="M:Fake.TaskRunnerHelper.waitFor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Boolean},System.TimeSpan,System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Waits until the given function returns true or the timeout is reached.
 ## Parameters

  - `f` - This function will be started.
  - `timeout` - A System.TimeSpan representing the timeout.
  - `testMS` - An interval at which FAKE checks if the function has succeeded.
  - `timeoutF` - This function will be run if the timeout has been reached.
</summary>
</member>
<member name="T:Fake.TaskRunnerHelper">
<summary>
 Contains a helper which can be used to implement timeouts and retries.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildNumber">
<summary>
 The Build number assigned to the build by TeamCity using the build number format or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildIsPersonal">
<summary>
 Is set to true if the build is a personal one.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildConfigurationName">
<summary>
 The Name of the Build Configuration the current build belongs to or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityProjectName">
<summary>
 The Name of the project the current build belongs to or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityVersion">
<summary>
 The Version of the TeamCity server. This property can be used to determine the build is run within TeamCity.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getChangedFilesInCurrentBuild">
<summary>
 Gets the changed files
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getRecentlyFailedTests">
<summary>
 Gets the recently failed tests
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ComparisonFailure(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Reports a failed comparison.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TestFailed(System.String,System.String,System.String)">
<summary>
 Reports a failed test.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetTeamCityParameter(System.String,System.String)">
<summary>
 Reports a parameter value
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildStatistic(System.String,System.String)">
<summary>
 Reports a build statistic.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildNumber(System.String)">
<summary>
 Sets the TeamCity build number.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TeamCityHelper.PublishArtifact(System.String)">
<summary>
 Publishes an artifact on the TeamcCity build server.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportBuildStatus(System.String,System.String)">
<summary>
 Reports the build status.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.buildStatus(System.String,System.String)">
<summary>
 Create  the build status.
 [omit]
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressFinish(System.String)">
<summary>
 Reports the progress end.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressStart(System.String)">
<summary>
 Reports the progress start.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgress(System.String)">
<summary>
 Reports the progress.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestSuite(System.String)">
<summary>
 Starts the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestSuite(System.String)">
<summary>
 Finishes the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.IgnoreTestCaseWithDetails(System.String,System.String,System.String)">
<summary>
 Ignores the test case.      
</summary>
</member>
<member name="M:Fake.TeamCityHelper.IgnoreTestCase(System.String,System.String)">
<summary>
 Ignores the test case.      
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestCase(System.String,System.TimeSpan)">
<summary>
 Finishes the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestCase(System.String)">
<summary>
 Starts the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFXCopImport(System.String)">
<summary>
 Sends an FXCop results filename to TeamCity    
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityNUnitImport(System.String)">
<summary>
 Sends an NUnit results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityError(System.String)">
<summary>
 Sends an error to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendStrToTeamCity(System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendToTeamCity(Microsoft.FSharp.Core.PrintfFormat{Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},Microsoft.FSharp.Core.Unit,System.String,System.String},System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.EncapsulateSpecialChars(System.String)">
<summary>
 Encapsulates special chars
</summary>
</member>
<member name="T:Fake.TeamCityHelper">
<summary>
 Contains helper functions which allow FAKE to communicate with a TeamCity agent
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TeamCityRESTHelper.Project">
<summary>
 Record type which stores TeamCity project properties
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TeamCityRESTHelper.BuildConfiguration">
<summary>
 Record type which stores Build configuration properties
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TeamCityRESTHelper.Build">
<summary>
 Record type which stores Build properties
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TeamCityRESTHelper.VCSRoot">
<summary>
 Record type which stores VCSRoot properties
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getProjects(System.String,System.String,System.String)">
<summary>
 Gets all projects on the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getProject(System.String,System.String,System.String,System.String)">
<summary>
 Gets informnation about a project from the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getBuildConfig(System.String,System.String,System.String,System.String)">
<summary>
 Gets information about a build configuration from the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getFirstNode(System.String,System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getRESTVersion(System.String,System.String,System.String)">
<summary>
 Returns the REST version of the TeamCity server
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.prepareURL(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper">
<summary>
 Contains functions which allow FAKE to interact with the [TeamCity REST API](http://confluence.jetbrains.com/display/TCD8/REST+API).
</summary>
</member>
<member name="M:Fake.TemplateHelper.processTemplates(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replaces the templates with the given replacements
</summary>
</member>
<member name="P:Fake.TemplateHelper.saveFiles">
<summary>
 Saves all files (lazy - file by file!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.replaceKeywords``2(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Replaces a bunch of the keywords in all files (lazy - line by line!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.loadTemplates(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Loads all templates (lazy - line by line!)    
</summary>
</member>
<member name="T:Fake.TemplateHelper">
<summary>
 Contains basic templating functions. Used in other helpers.
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Replace">
<summary>
 Replace binary for an existing build if one is found with the same name/bundle version
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Notify">
<summary>
 Notify permitted teammates to install the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.DistributionLists">
<summary>
 Distribution list names which will receive access to the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.DSym">
<summary>
 iOS ONLY - the .dSYM corresponding to the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Notes">
<summary>
 Release notes for the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.File">
<summary>
 (Required) file data for the build (.ipa or .apk)
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.TeamToken">
<summary>
 (Required) Team token from testflightapp.com/dashboard/team/edit
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.ApiToken">
<summary>
 (Required) API token from testflightapp.com/account/#api
</summary>
</member>
<member name="T:Fake.TestFlightHelper.TestFlightParams">
<summary>
 The TestFlight parameter type.
</summary>
</member>
<member name="M:Fake.TestFlightHelper.TestFlight(Microsoft.FSharp.Core.FSharpFunc{Fake.TestFlightHelper.TestFlightParams,Fake.TestFlightHelper.TestFlightParams})">
<summary>
 Uploads the app build to TestFlight.
 ## Parameters
  - `setParams` - Function used to manipulate the default TestFlightParams value.
</summary>
</member>
<member name="M:Fake.TestFlightHelper.toCurlArgs(Fake.TestFlightHelper.TestFlightParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TestFlightHelper.validateParams(Fake.TestFlightHelper.TestFlightParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightDefaults">
<summary>
 The default TestFlight upload parameters.
</summary>
</member>
<member name="T:Fake.TestFlightHelper">
<summary>
 Contains tasks to upload apps to [TestFlight](http://testflightapp.com)
</summary>
</member>
<member name="M:Fake.TraceHelper.logToConsole(System.String,System.Diagnostics.EventLogEntryType)">
<summary>
 Traces the message to the console
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TraceHelper.traceEndTask(System.String,System.String)">
<summary>
 Traces the end of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTask(System.String,System.String)">
<summary>
 Traces the begin of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndTarget(System.String)">
<summary>
 Traces the end of a target   
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTarget(System.String,System.String,System.String)">
<summary>
 Traces the begin of a target
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TraceHelper.closeTag(System.String)">
<summary>
 Removes an opening tag from the internal tag stack
</summary>
</member>
<member name="M:Fake.TraceHelper.openTag(System.String)">
<summary>
 Puts an opening tag on the internal tag stack
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndBuild">
<summary>
 Traces the end of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartBuild">
<summary>
 Traces the begin of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceHeader(System.String)">
<summary>
 Traces a header
</summary>
</member>
<member name="M:Fake.TraceHelper.traceLine">
<summary>
 Traces a line
</summary>
</member>
<member name="P:Fake.TraceHelper.fakeVersionStr">
<summary>
 Gets the FAKE Version string
</summary>
</member>
<member name="M:Fake.TraceHelper.TraceEnvironmentVariables">
<summary>
 Traces the EnvironmentVariables
</summary>
</member>
<member name="M:Fake.TraceHelper.traceException(System.Exception)">
<summary>
 Traces an exception details (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceError(System.String)">
<summary>
 Traces an error (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceFAKE``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a trace to the command line (in yellow)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceImportant(System.String)">
<summary>
 Writes a trace to stderr (in yellow)  
</summary>
</member>
<member name="M:Fake.TraceHelper.traceVerbose(System.String)">
<summary>
 Writes a trace to the command line (in green) if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.tracef``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green) and without a line break
</summary>
</member>
<member name="M:Fake.TraceHelper.tracefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.trace(System.String)">
<summary>
 Writes a trace to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.logVerbosefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified string if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.logf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message (without line break)
</summary>
</member>
<member name="M:Fake.TraceHelper.logfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message
</summary>
</member>
<member name="M:Fake.TraceHelper.log(System.String)">
<summary>
 Logs the specified string        
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.TraceHelper.fakeVersion">
<summary>
 Gets the FAKE version no.
</summary>
</member>
<member name="P:Fake.TraceHelper.fakePath">
<summary>
 Gets the path of the current FAKE instance
</summary>
</member>
<member name="T:Fake.TraceHelper">
<summary>
 This module contains function which allow to trace build output
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TraceListener.NAntXmlTraceListener.Fake-TraceListener-ITraceListener-Write(Fake.TraceListener.TraceData)">
<summary>
 Writes the given message to the xml file.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.TraceListener.NAntXmlTraceListener">
<summary>
 Implements a TraceListener which writes NAnt like XML files.
 ## Parameters
  - `xmlOutputFile` - Defines the xml output file.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TraceListener.ConsoleTraceListener.Fake-TraceListener-ITraceListener-Write(Fake.TraceListener.TraceData)">
<summary>
 Writes the given message to the Console.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.TraceListener.ConsoleTraceListener">
<summary>
 Implements a TraceListener for System.Console.
 ## Parameters
  - `importantMessagesToStdErr` - Defines whether to trace important messages to StdErr.
  - `colorMap` - A function which maps TracePriorities to ConsoleColors.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.TraceListener.ITraceListener">
<summary>
 Defines a TraceListener interface
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TraceListener.TraceData">
<summary>
 Defines Tracing information for TraceListeners
</summary>
</member>
<member name="M:Fake.TraceListener.postMessage(Fake.TraceListener.TraceData)">
<summary>
 Allows to post messages to all trace listeners
</summary>
</member>
<member name="M:Fake.TraceListener.addXmlListener(System.String)">
<summary>
 Allows to register a new Xml listeners
</summary>
</member>
<member name="P:Fake.TraceListener.listeners">
<summary>
 A List with all registered listeners
</summary>
</member>
<member name="P:Fake.TraceListener.AutoCloseXmlWriter">
<summary>
 Specifies if the XmlWriter should close tags automatically
</summary>
</member>
<member name="P:Fake.TraceListener.defaultConsoleTraceListener">
<summary>
 The default TraceListener for Console.
</summary>
</member>
<member name="M:Fake.TraceListener.colorMap(Fake.TraceListener.TraceData)">
<summary>
 A default color map which maps TracePriorities to ConsoleColors
</summary>
</member>
<member name="T:Fake.TraceListener">
<summary>
 Defines default listeners for build output traces
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.TimeOut">
<summary>
 Specifies the timeout for the TypeScript compiler.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.OutputPath">
<summary>
 Specifies the TypeScript compiler output path.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ToolPath">
<summary>
 Specifies the TypeScript compiler path.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.RemoveComments">
<summary>
 Specifies if the TypeScript compiler should remove comments. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.NoLib">
<summary>
 Specifies if the TypeScript compiler should not use libs. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitSourceMaps">
<summary>
 Specifies if the TypeScript compiler should emit source maps. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ModuleGeneration">
<summary>
 Specifies which JavaScript module type the TypeScript compiler should generate. Default is CommonJs.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitDeclarations">
<summary>
 Specifies if the TypeScript compiler should generate declarations. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.OutputSingleFile">
<summary>
 Specifies if the TypeScript compiler should generate a single output file and its filename.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitComments">
<summary>
 Specifies if the TypeScript compiler should generate comments. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ECMAScript">
<summary>
 Specifies which ECMAScript version the TypeScript compiler should generate. Default is ES3.
</summary>
</member>
<member name="T:Fake.TypeScript.TypeScriptParams">
<summary>
 TypeScript task parameter type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TypeScript.ModuleGeneration">
<summary>
 Generated JavaScript module type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.TypeScript.ECMAScript">
<summary>
 Generated ECMAScript version
</summary>
</member>
<member name="M:Fake.TypeScript.TypeScriptCompiler(Microsoft.FSharp.Core.FSharpFunc{Fake.TypeScript.TypeScriptParams,Fake.TypeScript.TypeScriptParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to call the [TypeScript](http://www.typescriptlang.org/) compiler.
 There is also a [tutorial](../typescript.html) for this task available.
 ## Parameters

  - `setParams` - Function used to overwrite the TypeScript compiler flags.
  - `files` - The type script files to compile.

 ## Sample

         !! &quot;src/**/*.ts&quot;
             |&gt; TypeScriptCompiler (fun p -&gt; { p with TimeOut = TimeSpan.MaxValue }) 
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.TypeScript.TypeScriptDefaultParams">
<summary>
 Default parameters for the TypeScript task
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.TypeScript">
<summary>
 Contains code to call the typescript compiler. There is also a [tutorial](../typescript.html) for this task available.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.DontFailBuild">
<summary>
 With this option set, no exception is thrown if a test is broken.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.FailOnFirstError">
<summary>
 This option instructs FAKE to break the build if a test runner finds the first error.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.Error">
<summary>
 This option instructs FAKE to break the build if a test runner reports an error.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel">
<summary>
 Option which allows to specify if a test runner error should break the build.
</summary>
</member>
<member name="T:Fake.UnitTestCommon">
<summary>
 This module contains types and functions that are common for unit test helpers.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.UnitTestHelper.TestResults">
<summary>
 Basic data type to represent test results
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.UnitTestHelper.Test">
<summary>
 Basic data type to represent tests
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.UnitTestHelper.TestStatus">
<summary>
 Basic data type to represent test status
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportTestResults(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to the detected build server
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportToAppVeyor(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to [AppVeyor](http://www.appveyor.com/).
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportToTeamCity(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to [TeamCity](http://www.jetbrains.com/teamcity/).
</summary>
</member>
<member name="T:Fake.UnitTestHelper">
<summary>
 This module contains functions which allow to report unit test results to build servers.
</summary>
</member>
<member name="M:Fake.VSSHelper.getVSSProject(System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Retrieves the given project from Microsoft Visual SourceSafe    
</summary>
</member>
<member name="M:Fake.VSSHelper.getVSSProjectWithLabel(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Retrieves the given label of the given project from Microsoft Visual SourceSafe
</summary>
</member>
<member name="T:Fake.VSSHelper">
<summary>
 Contains helper functions for [Microsoft Visual SourceSafe](http://en.wikipedia.org/wiki/Microsoft_Visual_SourceSafe)
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Patch">
<summary>
 PATCH version when you make backwards-compatible bug fixes.
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Minor">
<summary>
 MINOR version when you add functionality in a backwards-compatible manner.
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Major">
<summary>
 MAJOR version when you make incompatible API changes.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.VersionHelper.VerInfo">
<summary>
 Contains the version information.
</summary>
</member>
<member name="M:Fake.VersionHelper.GetAssemblyVersionString(System.String)">
<summary>
 Gets file assembly version in form of major.minor.build.revision.
 ## Parameters
  - `assemblyFile` - The assembly file path.
</summary>
</member>
<member name="M:Fake.VersionHelper.GetAssemblyVersion(System.String)">
<summary>
 Gets file assembly version.
 ## Parameters
  - `assemblyFile` - The assembly file path.
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.VersionHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.WiXHelper.WiXParams">
<summary>
 WiX parameter type
</summary>
</member>
<member name="M:Fake.WiXHelper.WiX(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXParams,Fake.WiXHelper.WiXParams},System.String,System.String)">
<summary>
 Uses the WiX tools [Candle](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) and [Light](http://wixtoolset.org/documentation/manual/v3/overview/light.html) to create an msi.
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.
  - `outputFile` - The msi output file path (given to Light).
  - `wixScript` - The path to a WiX script that will be used with Candle.

 ## Sample
     Target &quot;BuildSetup&quot; (fun _ -&gt;
         // Copy all important files to the deploy directory
         !! (buildDir + &quot;/**/*.dll&quot;)
           ++ (buildDir + &quot;/**/*.exe&quot;)
           ++ (buildDir + &quot;/**/*.config&quot;)
           |&gt; Copy deployPrepDir 
    
         // replace tags in a template file in order to generate a WiX script
         let ALLFILES = fun _ -&gt; true
     
         let replacements = [
             &quot;@build.number@&quot;,if not isLocalBuild then buildVersion else &quot;0.1.0.0&quot;
             &quot;@product.productcode@&quot;,System.Guid.NewGuid().ToString()
             &quot;@HelpFiles@&quot;,getFilesAsWiXString helpFiles
             &quot;@ScriptFiles@&quot;,getFilesAsWiXString scriptFiles
             &quot;@icons@&quot;,wixDir ALLFILES true (directoryInfo(bundledDir @@ &quot;icons&quot;))]
         
         processTemplates replacements setupFiles
     
         // run the WiX tools
         WiX (fun p -&gt; {p with ToolDirectory = WiXPath}) 
             setupFileName
             (setupBuildDir + &quot;Setup.wxs.template&quot;)
     )
</summary>
</member>
<member name="M:Fake.WiXHelper.Light(Fake.WiXHelper.WiXParams,System.String,System.String)">
<summary>
 Runs the [Light tool](http://wixtoolset.org/documentation/manual/v3/overview/light.html) on the given WiX script with the given parameters
</summary>
</member>
<member name="M:Fake.WiXHelper.Candle(Fake.WiXHelper.WiXParams,System.String)">
<summary>
 Runs the [Candle tool](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) on the given WiX script with the given parameters
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXDefaults">
<summary>
 Contains the WiX default parameters  
</summary>
</member>
<member name="M:Fake.WiXHelper.wixComponentRefs(System.IO.DirectoryInfo)">
<summary>
 Creates WiX ComponentRef tags from the given DirectoryInfo
</summary>
</member>
<member name="M:Fake.WiXHelper.wixDir(Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,System.Boolean},System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Creates recursive WiX directory and file tags from the given DirectoryInfo
</summary>
</member>
<member name="M:Fake.WiXHelper.getFilesAsWiXString(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates WiX File tags from the given files
</summary>
</member>
<member name="M:Fake.WiXHelper.wixFile(System.IO.FileInfo)">
<summary>
 Creates a WiX File tag from the given FileInfo
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.WiXHelper">
<summary>
 Contains tasks to create msi installers using the [WiX toolset](http://wixtoolset.org/)
</summary>
</member>
<member name="M:Fake.XCopyHelper.XCopy(System.String,System.String)">
<summary>
 Executes a XCopy command
 ## Parameters
  - `source` - The source directory
  - `destination` - The target directory
</summary>
</member>
<member name="T:Fake.XCopyHelper">
<summary>
 Contains a task to use [XCOPY](http://en.wikipedia.org/wiki/XCOPY) on Windows.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.XDTHelper.FakeXmlTransformationLogger">
<summary>
 Integrates XDT logging into FAKE logging.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFilesWithConfigName(System.String,Fake.FileSystem.FileIncludes)">
<summary>
 Modifies XML files in place using an XDT file named by inserting a .configName in between each filename and .extension.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFileWithConfigName(System.String,System.String)">
<summary>
 Modifies an XML file in place using an XDT file named by inserting a .configName in between the filename and .extension.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFile(System.String,System.String,System.String)">
<summary>
 Reads XML file (typically a config file), makes changes according to XDT transform syntax, saves result.
</summary>
</member>
<member name="T:Fake.XDTHelper">
<summary>
 Contains functions used to transform config (or any XML) files using Microsoft&apos;s XML Document Transformations.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlTransform(System.String,System.String)">
<summary>
 Transforms a XML file using a XSL stylesheet file.
 ## Parameters
 
  - `stylesheetUri` - The Uri for the XSL stylesheet file.
  - `fileName` - The XML file to transform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XslTransform(System.Xml.Xsl.XslCompiledTransform,System.Xml.XmlDocument)">
<summary>
 Transforms a XmlDocument using a XslCompiledTransform.
 ## Parameters
 
  - `xsl` - The XslCompiledTransform which should be applied.
  - `doc` - The XmlDocument to transform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XslTransformer(System.String)">
<summary>
 Loads the given text into a XslCompiledTransform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPokeNS(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.String,System.String)">
<summary>
 Replaces text in a XML file at the location specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplaceNS``1(System.String,System.String,``0,System.Xml.XmlDocument)">
<summary>
 Replaces text in a XML document specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPoke(System.String,System.String,System.String)">
<summary>
 Replaces text in a XML file at the location specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathValue``1(System.String,``0,System.Xml.XmlDocument)">
<summary>
 Selects a xml node value via XPath from the given document
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplace(System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Replaces text in the XML document specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.DocElement(System.Xml.XmlDocument)">
<summary>
 Gets the DocumentElement of the XmlDocument
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLDoc(System.String)">
<summary>
 Loads the given text into a XmlDocument
</summary>
</member>
<member name="M:Fake.XMLHelper.parseSubNode``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.Xml.XmlNode,``0})">
<summary>
 Parses a XML subnode
</summary>
</member>
<member name="M:Fake.XMLHelper.parse``2(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Parses a XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getSubNode(System.String,System.Xml.XmlNode)">
<summary>
 Gets the first sub node with the given name from the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getChilds``1(``0)">
<summary>
 Gets a sequence of all child nodes for the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getAttribute``1(System.String,``0)">
<summary>
 Gets the attribute with the given name from the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlCDataElement(System.String,System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an CData element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlAttribute``1(System.String,``0,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML attribute to current element of the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlEndElement(System.Xml.XmlTextWriter)">
<summary>
 Writes an XML end element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlStartElement(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML start element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlComment(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML comment to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlWriter(System.String)">
<summary>
 Creates a XmlWriter which writes to the given file name
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead_Int(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
 Returns if the value is an int and the value
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
</summary>
</member>
<member name="T:Fake.XMLHelper">
<summary>
 Contains functions to read and write XML files.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.OutputDir">
<summary>
 output directory
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.HtmlOutput">
<summary>
 output results to HTML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.XmlOutputV1">
<summary>
 output results to xUnit.net v1 style XML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.XmlOutput">
<summary>
 output results to xUnit.net v2 style XML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ExcludeTraits">
<summary>
 Exclude named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.IncludeTraits">
<summary>
 Include named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ErrorLevel">
<summary>
 Test runner error level. Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Appveyor">
<summary>
 forces AppVeyor CI mode (normally auto-detected)
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Teamcity">
<summary>
 forces TeamCity mode (normally auto-detected)
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ShadowCopy">
<summary>
 Shadow copy
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Silent">
<summary>
 Output running test count
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.MaxThreads">
<summary>
 maximum thread count for collection parallelization
 0 - run with unbounded thread count
 &gt;0 - limit task thread pool size to &apos;count&apos;
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Parallel">
<summary>
 set parallelization based on option
   none - turn off all parallelization
   collections - only parallelize collections
   assemblies - only parallelize assemblies
   all - parallelize assemblies &amp; collections
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ConfigFile">
<summary>
 The file name of the config file (optional).
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ToolPath">
<summary>
 The path to the xunit.console.exe - FAKE will scan all subfolders to find it automatically.
</summary>
</member>
<member name="T:Fake.XUnit2Helper.XUnit2Params">
<summary>
 The xUnit parameter type
</summary>
</member>
<member name="T:Fake.XUnit2Helper.XUnit2ErrorLevel">
<summary>
 Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.XUnit2Helper.xUnit2(Microsoft.FSharp.Core.FSharpFunc{Fake.XUnit2Helper.XUnit2Params,Fake.XUnit2Helper.XUnit2Params},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.
 Offending assemblies will be listed in the error message.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default XUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\xUnit.Test.*.dll&quot;) 
           |&gt; xUnit (fun p -&gt; {p with OutputDir = testDir })
     )
</summary>
</member>
<member name="M:Fake.XUnit2Helper.buildXUnit2Args(Fake.XUnit2Helper.XUnit2Params,System.String)">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.XUnit2Helper.empty2Trait">
<summary>
 The xUnit default parameters
</summary>
</member>
<member name="T:Fake.XUnit2Helper">
<summary>
 Contains tasks to run [xUnit](http://xunit.codeplex.com/) unit tests.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ExcludeTraits">
<summary>
 Exclude named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.IncludeTraits">
<summary>
 Include named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ErrorLevel">
<summary>
 Test runner error level. Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.OutputDir">
<summary>
 The output directory. It&apos;s the current directoy if nothing else is specified.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.Verbose">
<summary>
 If set to true xUnit will generate verbose output.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ShadowCopy">
<summary>
 If set to true xUnit will run in ShadowCopy mode.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.XmlOutput">
<summary>
 If set to true XML output will be generated.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.NUnitXmlOutput">
<summary>
 If set to true a HTML output file will be generated in NUnit format.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.HtmlOutput">
<summary>
 If set to true a HTML output file will be generated.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ConfigFile">
<summary>
 The file name of the config file (optional).
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ToolPath">
<summary>
 The path to the xunit.console.clr4.exe - FAKE will scan all subfolders to find it automatically.
</summary>
</member>
<member name="T:Fake.XUnitHelper.XUnitParams">
<summary>
 The xUnit parameter type
</summary>
</member>
<member name="T:Fake.XUnitHelper.XUnitErrorLevel">
<summary>
 Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="M:Fake.XUnitHelper.xUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.XUnitHelper.XUnitParams,Fake.XUnitHelper.XUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.
 Offending assemblies will be listed in the error message.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default XUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\xUnit.Test.*.dll&quot;) 
           |&gt; xUnit (fun p -&gt; {p with OutputDir = testDir })
     )
</summary>
</member>
<member name="M:Fake.XUnitHelper.buildXUnitArgs(Fake.XUnitHelper.XUnitParams,System.String)">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.XUnitHelper.emptyTrait">
<summary>
 The xUnit default parameters
</summary>
</member>
<member name="T:Fake.XUnitHelper">
<summary>
 Contains tasks to run [xUnit](http://xunit.codeplex.com/) unit tests.
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.MDToolPath">
<summary>
 Path to mdtool, defaults to Xamarin Studio&apos;s usual path
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Debug|iPhoneSimulator&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.ProjectPath">
<summary>
 (Required) Path to project file
</summary>
</member>
<member name="T:Fake.XamarinHelper.iOSArchiveParams">
<summary>
 The iOS archive paramater type
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.ZipalignPath">
<summary>
 Path to zipalign tool, defaults to assuming it is in your path
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.JarsignerPath">
<summary>
 Path to jarsigner tool, defaults to assuming it is in your path
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystoreAlias">
<summary>
 (Required) Alias for keystore
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystorePassword">
<summary>
 (Required) Password for keystore
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystorePath">
<summary>
 (Required) Path to keystore used to sign the app
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.OutputPath">
<summary>
 Output path for build, defaults to &apos;bin/Release&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Release&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.ProjectPath">
<summary>
 (Required) Path to the Android project file (not the solution file!)
</summary>
</member>
<member name="T:Fake.XamarinHelper.AndroidPackageParams">
<summary>
 The Android packaging parameter type
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.MDToolPath">
<summary>
 Path to mdtool, defaults to Xamarin Studio&apos;s usual path
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Debug|iPhoneSimulator&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Target">
<summary>
 Build target, defaults to Build
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.ProjectPath">
<summary>
 (Required) Path to solution or project file
</summary>
</member>
<member name="T:Fake.XamarinHelper.iOSBuildParams">
<summary>
 The iOS build paramater type
</summary>
</member>
<member name="P:Fake.XamarinHelper.XamarinComponentRestoreParams.ToolPath">
<summary>
 Path to xamarin-component.exe, defaults to checking tools/xpkg
</summary>
</member>
<member name="T:Fake.XamarinHelper.XamarinComponentRestoreParams">
<summary>
 The package restore paramater type
</summary>
</member>
<member name="M:Fake.XamarinHelper.iOSArchive(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.iOSArchiveParams,Fake.XamarinHelper.iOSArchiveParams})">
<summary>
 Archive a project using Xamarin&apos;s iOS archive tools
 ## Parameters
  - `setParams` - Function used to override the default archive parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveDefaults">
<summary>
 The default iOS archive parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidSignAndAlign(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidSignAndAlignParams,Fake.XamarinHelper.AndroidSignAndAlignParams},System.IO.FileInfo)">
<summary>
 Signs and aligns a Xamarin.Android package, returning a FileInfo object for the signed APK file
 ## Parameters
  - `setParams` - Function used to override the default build parameters
  - `apkFile` - FileInfo object for an unsigned APK file to sign and align
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignDefaults">
<summary>
 The default Android signing and aligning parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidPackage(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidPackageParams,Fake.XamarinHelper.AndroidPackageParams})">
<summary>
 Packages a Xamarin.Android app, returning a FileInfo object for the unsigned APK file
 ## Parameters
  - `setParams` - Function used to override the default build parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageDefaults">
<summary>
 The default Android packaging parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.iOSBuild(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.iOSBuildParams,Fake.XamarinHelper.iOSBuildParams})">
<summary>
 Builds a project or solution using Xamarin&apos;s iOS build tools
 ## Parameters
  - `setParams` - Function used to override the default build parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildDefaults">
<summary>
 The default iOS build parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.RestoreComponents(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.XamarinComponentRestoreParams,Fake.XamarinHelper.XamarinComponentRestoreParams},System.String)">
<summary>
 Restores NuGet packages and Xamarin Components for a project or solution
 ## Parameters
  - `setParams` - Function used to override the default package restore parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.XamarinComponentRestoreDefaults">
<summary>
 The default package restore parameters
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.XamarinHelper">
<summary>
 Contains tasks for building Xamarin.iOS and Xamarin.Android apps
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.XpkgHelper.xpkgParams">
<summary>
 Parameter type for xpkg tasks
</summary>
</member>
<member name="M:Fake.XpkgHelper.xpkgValidate(Microsoft.FSharp.Core.FSharpFunc{Fake.XpkgHelper.xpkgParams,Fake.XpkgHelper.xpkgParams})">
<summary>
 Validates a xpkg package based on the package file name
</summary>
</member>
<member name="M:Fake.XpkgHelper.xpkgPack(Microsoft.FSharp.Core.FSharpFunc{Fake.XpkgHelper.xpkgParams,Fake.XpkgHelper.xpkgParams})">
<summary>
 Creates a new xpkg package based on the package file name

 ## Sample

     Target &quot;PackageXamarinDistribution&quot; (fun _ -&gt; 
          xpkgPack (fun p -&gt;
              {p with
                  ToolPath = xpkgExecutable;
                  Package = &quot;Portable.Licensing&quot;;
                  Version = assemblyFileVersion;
                  OutputPath = publishDir
                  Project = &quot;Portable.Licensing&quot;
                  Summary = &quot;Portable.Licensing is a cross platform licensing tool&quot;
                  Publisher = &quot;Nauck IT KG&quot;
                  Website = &quot;http://dev.nauck-it.de&quot;
                  Details = &quot;./Xamarin/Details.md&quot;
                  License = &quot;License.md&quot;
                  GettingStarted = &quot;./Xamarin/GettingStarted.md&quot;
                  Icons = [&quot;./Xamarin/Portable.Licensing_512x512.png&quot;
                           &quot;./Xamarin/Portable.Licensing_128x128.png&quot;]
                  Libraries = [&quot;mobile&quot;, &quot;./Distribution/lib/Portable.Licensing.dll&quot;]
                  Samples = [&quot;Android Sample.&quot;, &quot;./Samples/Android/Android.Sample.sln&quot;
                             &quot;iOS Sample.&quot;, &quot;./Samples/iOS/iOS.Sample.sln&quot;]
              }
          )
      )
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.XpkgHelper.XpkgDefaults">
<summary>
 Creates xpkg default parameters
</summary>
</member>
<member name="T:Fake.XpkgHelper">
<summary>
 Contains tasks to create packages in [Xamarin&apos;s xpkg format](http://components.xamarin.com/)
</summary>
</member>
<member name="M:Fake.ZipHelper.UnzipFirstMatchingFileInMemory(Microsoft.FSharp.Core.FSharpFunc{ICSharpCode.SharpZipLib.Zip.ZipEntry,System.Boolean},System.String)">
<summary>
 Unzips a single file from the archive with the given file name.
 ## Parameters
  - `predicate` - The predictae for the searched file in the archive.
  - `zipFileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.UnzipSingleFileInMemory(System.String,System.String)">
<summary>
 Unzips a single file from the archive with the given file name.
 ## Parameters
  - `fileToUnzip` - The file inside the archive.
  - `zipFileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.Unzip(System.String,System.String)">
<summary>
 Unzips a file with the given file name.
 ## Parameters
  - `target` - The target directory.
  - `fileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.ZipFile(System.String,System.String)">
<summary>
 Creates a zip file with the given file.
 ## Parameters
  - `fileName` - The file name of the resulting zip file.
  - `targetFileName` - The file to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates a zip file with the given files.
 ## Parameters
  - `workingDir` - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
  - `fileName` - The file name of the resulting zip file.
  - `files` - A sequence with files to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.CreateZip(System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates a zip file with the given files
 ## Parameters
  - `workingDir` - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
  - `fileName` - The fileName of the resulting zip file.
  - `comment` - A comment for the resulting zip file.
  - `level` - The compression level.
  - `flatten` - If set to true then all subfolders are merged into the root folder.
  - `files` - A sequence with files to zip.
</summary>
</member>
<member name="P:Fake.ZipHelper.DefaultZipLevel">
<summary>
 The default zip level
</summary>
</member>
<member name="T:Fake.ZipHelper">
<summary>
 This module contains helper function to create and extract zip archives.
</summary>
</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
</members>
</doc>
